
exo-esqueleto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003344  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034cc  080034cc  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080034cc  080034cc  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034cc  080034cc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034d0  080034d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080034d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000020  080034f4  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080034f4  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d71f  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f48  00000000  00000000  0002d768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002f6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00030388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017137  00000000  00000000  00030f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e40d  00000000  00000000  000480cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086a96  00000000  00000000  000564dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcf72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003504  00000000  00000000  000dcfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08003438 	.word	0x08003438

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08003438 	.word	0x08003438

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b3c      	ldr	r3, [pc, #240]	; (8000254 <MX_GPIO_Init+0x108>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a3b      	ldr	r2, [pc, #236]	; (8000254 <MX_GPIO_Init+0x108>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b39      	ldr	r3, [pc, #228]	; (8000254 <MX_GPIO_Init+0x108>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b36      	ldr	r3, [pc, #216]	; (8000254 <MX_GPIO_Init+0x108>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a35      	ldr	r2, [pc, #212]	; (8000254 <MX_GPIO_Init+0x108>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b33      	ldr	r3, [pc, #204]	; (8000254 <MX_GPIO_Init+0x108>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b30      	ldr	r3, [pc, #192]	; (8000254 <MX_GPIO_Init+0x108>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a2f      	ldr	r2, [pc, #188]	; (8000254 <MX_GPIO_Init+0x108>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b2d      	ldr	r3, [pc, #180]	; (8000254 <MX_GPIO_Init+0x108>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80001ae:	482a      	ldr	r0, [pc, #168]	; (8000258 <MX_GPIO_Init+0x10c>)
 80001b0:	f001 fb37 	bl	8001822 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	4828      	ldr	r0, [pc, #160]	; (800025c <MX_GPIO_Init+0x110>)
 80001ba:	f001 fb32 	bl	8001822 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	f24e 0108 	movw	r1, #57352	; 0xe008
 80001c4:	4826      	ldr	r0, [pc, #152]	; (8000260 <MX_GPIO_Init+0x114>)
 80001c6:	f001 fb2c 	bl	8001822 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80001ca:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d0:	2301      	movs	r3, #1
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d8:	2302      	movs	r3, #2
 80001da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001dc:	f107 0310 	add.w	r3, r7, #16
 80001e0:	4619      	mov	r1, r3
 80001e2:	481d      	ldr	r0, [pc, #116]	; (8000258 <MX_GPIO_Init+0x10c>)
 80001e4:	f001 f982 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80001e8:	2310      	movs	r3, #16
 80001ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f4:	2302      	movs	r3, #2
 80001f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	4817      	ldr	r0, [pc, #92]	; (800025c <MX_GPIO_Init+0x110>)
 8000200:	f001 f974 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3;
 8000204:	f24e 0308 	movw	r3, #57352	; 0xe008
 8000208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020a:	2301      	movs	r3, #1
 800020c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020e:	2300      	movs	r3, #0
 8000210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000212:	2302      	movs	r3, #2
 8000214:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	4810      	ldr	r0, [pc, #64]	; (8000260 <MX_GPIO_Init+0x114>)
 800021e:	f001 f965 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000222:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000226:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_GPIO_Init+0x118>)
 800022a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800022c:	2302      	movs	r3, #2
 800022e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	480a      	ldr	r0, [pc, #40]	; (8000260 <MX_GPIO_Init+0x114>)
 8000238:	f001 f958 	bl	80014ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2017      	movs	r0, #23
 8000242:	f001 f86a 	bl	800131a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000246:	2017      	movs	r0, #23
 8000248:	f001 f883 	bl	8001352 <HAL_NVIC_EnableIRQ>

}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40021000 	.word	0x40021000
 8000258:	40011000 	.word	0x40011000
 800025c:	40010800 	.word	0x40010800
 8000260:	40010c00 	.word	0x40010c00
 8000264:	10110000 	.word	0x10110000

08000268 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
func_ptr_t exo_preactions[4] = {ref_routine_fn, go_down_fn, go_up_fn, sinewave_fn};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	80fb      	strh	r3, [r7, #6]
	if(exoconfig[thumb].home.pin == GPIO_Pin)
 8000272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000276:	88fb      	ldrh	r3, [r7, #6]
 8000278:	4293      	cmp	r3, r2
 800027a:	d10e      	bne.n	800029a <HAL_GPIO_EXTI_Callback+0x32>
	{
		if(home_routine[thumb] == lost)
 800027c:	4b30      	ldr	r3, [pc, #192]	; (8000340 <HAL_GPIO_EXTI_Callback+0xd8>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	b2db      	uxtb	r3, r3
 8000282:	2b00      	cmp	r3, #0
 8000284:	d157      	bne.n	8000336 <HAL_GPIO_EXTI_Callback+0xce>
		{
			sleep_motor(exoconfig[thumb].sleep.port, exoconfig[thumb].sleep.pin);
 8000286:	2301      	movs	r3, #1
 8000288:	2210      	movs	r2, #16
 800028a:	4611      	mov	r1, r2
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fc65 	bl	8000b5c <sleep_motor>
			home_routine[thumb] = home;
 8000292:	4b2b      	ldr	r3, [pc, #172]	; (8000340 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000294:	2201      	movs	r2, #1
 8000296:	701a      	strb	r2, [r3, #0]
			sleep_motor(exoconfig[little].sleep.port, exoconfig[little].sleep.pin);
			home_routine[little] = home;
		}
	}

}
 8000298:	e04d      	b.n	8000336 <HAL_GPIO_EXTI_Callback+0xce>
	else if(exoconfig[index].home.pin == GPIO_Pin)
 800029a:	2220      	movs	r2, #32
 800029c:	88fb      	ldrh	r3, [r7, #6]
 800029e:	4293      	cmp	r3, r2
 80002a0:	d10f      	bne.n	80002c2 <HAL_GPIO_EXTI_Callback+0x5a>
		if(home_routine[index] == lost)
 80002a2:	4b27      	ldr	r3, [pc, #156]	; (8000340 <HAL_GPIO_EXTI_Callback+0xd8>)
 80002a4:	785b      	ldrb	r3, [r3, #1]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d144      	bne.n	8000336 <HAL_GPIO_EXTI_Callback+0xce>
			sleep_motor(exoconfig[index].sleep.port, exoconfig[index].sleep.pin);
 80002ac:	2301      	movs	r3, #1
 80002ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80002b2:	4611      	mov	r1, r2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fc51 	bl	8000b5c <sleep_motor>
			home_routine[index] = home;
 80002ba:	4b21      	ldr	r3, [pc, #132]	; (8000340 <HAL_GPIO_EXTI_Callback+0xd8>)
 80002bc:	2201      	movs	r2, #1
 80002be:	705a      	strb	r2, [r3, #1]
}
 80002c0:	e039      	b.n	8000336 <HAL_GPIO_EXTI_Callback+0xce>
	else if(exoconfig[middle].home.pin == GPIO_Pin)
 80002c2:	2240      	movs	r2, #64	; 0x40
 80002c4:	88fb      	ldrh	r3, [r7, #6]
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d10f      	bne.n	80002ea <HAL_GPIO_EXTI_Callback+0x82>
		if(home_routine[middle] == lost)
 80002ca:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <HAL_GPIO_EXTI_Callback+0xd8>)
 80002cc:	789b      	ldrb	r3, [r3, #2]
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d130      	bne.n	8000336 <HAL_GPIO_EXTI_Callback+0xce>
			sleep_motor(exoconfig[middle].sleep.port, exoconfig[middle].sleep.pin);
 80002d4:	2300      	movs	r3, #0
 80002d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002da:	4611      	mov	r1, r2
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 fc3d 	bl	8000b5c <sleep_motor>
			home_routine[middle] = home;
 80002e2:	4b17      	ldr	r3, [pc, #92]	; (8000340 <HAL_GPIO_EXTI_Callback+0xd8>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	709a      	strb	r2, [r3, #2]
}
 80002e8:	e025      	b.n	8000336 <HAL_GPIO_EXTI_Callback+0xce>
	else if(exoconfig[ring].home.pin == GPIO_Pin)
 80002ea:	2280      	movs	r2, #128	; 0x80
 80002ec:	88fb      	ldrh	r3, [r7, #6]
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d10e      	bne.n	8000310 <HAL_GPIO_EXTI_Callback+0xa8>
		if(home_routine[ring] == lost)
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <HAL_GPIO_EXTI_Callback+0xd8>)
 80002f4:	78db      	ldrb	r3, [r3, #3]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d11c      	bne.n	8000336 <HAL_GPIO_EXTI_Callback+0xce>
			sleep_motor(exoconfig[ring].sleep.port, exoconfig[ring].sleep.pin);
 80002fc:	2300      	movs	r3, #0
 80002fe:	2280      	movs	r2, #128	; 0x80
 8000300:	4611      	mov	r1, r2
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fc2a 	bl	8000b5c <sleep_motor>
			home_routine[ring] = home;
 8000308:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <HAL_GPIO_EXTI_Callback+0xd8>)
 800030a:	2201      	movs	r2, #1
 800030c:	70da      	strb	r2, [r3, #3]
}
 800030e:	e012      	b.n	8000336 <HAL_GPIO_EXTI_Callback+0xce>
	else if(exoconfig[little].home.pin == GPIO_Pin)
 8000310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000314:	88fb      	ldrh	r3, [r7, #6]
 8000316:	4293      	cmp	r3, r2
 8000318:	d10d      	bne.n	8000336 <HAL_GPIO_EXTI_Callback+0xce>
		if(home_routine[little] == lost)
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <HAL_GPIO_EXTI_Callback+0xd8>)
 800031c:	791b      	ldrb	r3, [r3, #4]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	d108      	bne.n	8000336 <HAL_GPIO_EXTI_Callback+0xce>
			sleep_motor(exoconfig[little].sleep.port, exoconfig[little].sleep.pin);
 8000324:	2301      	movs	r3, #1
 8000326:	2208      	movs	r2, #8
 8000328:	4611      	mov	r1, r2
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fc16 	bl	8000b5c <sleep_motor>
			home_routine[little] = home;
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000332:	2201      	movs	r2, #1
 8000334:	711a      	strb	r2, [r3, #4]
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000040 	.word	0x20000040

08000344 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	//waits until buffer is empty again
	if(empty == buffer_status)
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_UART_RxCpltCallback+0x24>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	2b00      	cmp	r3, #0
 8000354:	d102      	bne.n	800035c <HAL_UART_RxCpltCallback+0x18>
	{
		buffer_status = full;
 8000356:	4b04      	ldr	r3, [pc, #16]	; (8000368 <HAL_UART_RxCpltCallback+0x24>)
 8000358:	2201      	movs	r2, #1
 800035a:	701a      	strb	r2, [r3, #0]
	}
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	20000045 	.word	0x20000045

0800036c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a06      	ldr	r2, [pc, #24]	; (8000394 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d104      	bne.n	8000388 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		if(~timeout_flg)
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000380:	781b      	ldrb	r3, [r3, #0]
		{
			timeout_flg = 1;
 8000382:	4b05      	ldr	r3, [pc, #20]	; (8000398 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000384:	2201      	movs	r2, #1
 8000386:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40000400 	.word	0x40000400
 8000398:	2000003c 	.word	0x2000003c

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08a      	sub	sp, #40	; 0x28
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	enum_action act = reference_routine;
 80003a2:	2301      	movs	r3, #1
 80003a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	st_exoesk exoesk = {{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN}, {0}, {0}, No};
 80003a8:	f107 0308 	add.w	r3, r7, #8
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
 80003b8:	615a      	str	r2, [r3, #20]
 80003ba:	831a      	strh	r2, [r3, #24]
 80003bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003c0:	813b      	strh	r3, [r7, #8]
 80003c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003c6:	817b      	strh	r3, [r7, #10]
 80003c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003cc:	81bb      	strh	r3, [r7, #12]
 80003ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003d2:	81fb      	strh	r3, [r7, #14]
 80003d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003d8:	823b      	strh	r3, [r7, #16]

	uint8_t buffer = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	71fb      	strb	r3, [r7, #7]
	uint8_t position_flag = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e4:	f000 fe60 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e8:	f000 f8da 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ec:	f7ff feae 	bl	800014c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80003f0:	f000 fdb6 	bl	8000f60 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80003f4:	f000 fcdc 	bl	8000db0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003f8:	f000 fd26 	bl	8000e48 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart3, &buffer, sizeof(buffer));
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	2201      	movs	r2, #1
 8000400:	4619      	mov	r1, r3
 8000402:	4860      	ldr	r0, [pc, #384]	; (8000584 <main+0x1e8>)
 8000404:	f002 fab4 	bl	8002970 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000408:	485f      	ldr	r0, [pc, #380]	; (8000588 <main+0x1ec>)
 800040a:	f001 feb3 	bl	8002174 <HAL_TIM_Base_Start_IT>
	exo_init(&exoesk);
 800040e:	f107 0308 	add.w	r3, r7, #8
 8000412:	4618      	mov	r0, r3
 8000414:	f000 fafe 	bl	8000a14 <exo_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(full == buffer_status)
 8000418:	4b5c      	ldr	r3, [pc, #368]	; (800058c <main+0x1f0>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	b2db      	uxtb	r3, r3
 800041e:	2b01      	cmp	r3, #1
 8000420:	d168      	bne.n	80004f4 <main+0x158>
		{
			act = buffer;
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			if(position_flag)
 8000428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800042c:	2b00      	cmp	r3, #0
 800042e:	d010      	beq.n	8000452 <main+0xb6>
			{
				gotopos_fn(&exoesk, (act-1)<<sixteen_step);
 8000430:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000434:	b29b      	uxth	r3, r3
 8000436:	3b01      	subs	r3, #1
 8000438:	b29b      	uxth	r3, r3
 800043a:	011b      	lsls	r3, r3, #4
 800043c:	b29a      	uxth	r2, r3
 800043e:	f107 0308 	add.w	r3, r7, #8
 8000442:	4611      	mov	r1, r2
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fb0d 	bl	8000a64 <gotopos_fn>
				position_flag = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000450:	e046      	b.n	80004e0 <main+0x144>
			}
			else
			{
				if(act > not_used && act < gotoposition)
 8000452:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000456:	2b00      	cmp	r3, #0
 8000458:	d00e      	beq.n	8000478 <main+0xdc>
 800045a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800045e:	2b04      	cmp	r3, #4
 8000460:	d80a      	bhi.n	8000478 <main+0xdc>
				{
					exo_preactions[act-1](&exoesk);
 8000462:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000466:	3b01      	subs	r3, #1
 8000468:	4a49      	ldr	r2, [pc, #292]	; (8000590 <main+0x1f4>)
 800046a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800046e:	f107 0208 	add.w	r2, r7, #8
 8000472:	4610      	mov	r0, r2
 8000474:	4798      	blx	r3
 8000476:	e033      	b.n	80004e0 <main+0x144>
				}
				else if(act == gotoposition)
 8000478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800047c:	2b05      	cmp	r3, #5
 800047e:	d103      	bne.n	8000488 <main+0xec>
				{
					// set flag for entering position
					position_flag = 1;
 8000480:	2301      	movs	r3, #1
 8000482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000486:	e02b      	b.n	80004e0 <main+0x144>
				}
				else if(act > nothing && act < stopped)
 8000488:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800048c:	2b74      	cmp	r3, #116	; 0x74
 800048e:	d90c      	bls.n	80004aa <main+0x10e>
 8000490:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000494:	2b7e      	cmp	r3, #126	; 0x7e
 8000496:	d808      	bhi.n	80004aa <main+0x10e>
				{
					toggle_finger(&exoesk, act);
 8000498:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800049c:	f107 0308 	add.w	r3, r7, #8
 80004a0:	4611      	mov	r1, r2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f8b8 	bl	8000618 <toggle_finger>
 80004a8:	e01a      	b.n	80004e0 <main+0x144>
				}
				else if(act == reserved_major_C)
 80004aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80004ae:	2b43      	cmp	r3, #67	; 0x43
 80004b0:	d116      	bne.n	80004e0 <main+0x144>
				{
					uint8_t finger=0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					for(finger=0; finger<flength; finger++)
 80004b8:	2300      	movs	r3, #0
 80004ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80004be:	e00b      	b.n	80004d8 <main+0x13c>
					{
						exoesk.fingers_in_op[finger] = No;
 80004c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80004c4:	3328      	adds	r3, #40	; 0x28
 80004c6:	443b      	add	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
					for(finger=0; finger<flength; finger++)
 80004ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80004d2:	3301      	adds	r3, #1
 80004d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80004d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80004dc:	2b04      	cmp	r3, #4
 80004de:	d9ef      	bls.n	80004c0 <main+0x124>
				{

				}
			}

			clean_buffer(&buffer);
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fb28 	bl	8000b38 <clean_buffer>
			HAL_UART_Receive_IT(&huart3, &buffer, sizeof(buffer));
 80004e8:	1dfb      	adds	r3, r7, #7
 80004ea:	2201      	movs	r2, #1
 80004ec:	4619      	mov	r1, r3
 80004ee:	4825      	ldr	r0, [pc, #148]	; (8000584 <main+0x1e8>)
 80004f0:	f002 fa3e 	bl	8002970 <HAL_UART_Receive_IT>

		}

		// In case any finger touches home button
		// that finger has to stop moving
		uint8_t finger=0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		for(finger=0; finger<flength; finger++)
 80004fa:	2300      	movs	r3, #0
 80004fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000500:	e02a      	b.n	8000558 <main+0x1bc>
		{
			if(home_routine[finger] == home)
 8000502:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000506:	4a23      	ldr	r2, [pc, #140]	; (8000594 <main+0x1f8>)
 8000508:	5cd3      	ldrb	r3, [r2, r3]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2b01      	cmp	r3, #1
 800050e:	d11e      	bne.n	800054e <main+0x1b2>
			{
				sleep_motor(exoconfig[finger].sleep.port, exoconfig[finger].sleep.pin);
 8000510:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000514:	4a20      	ldr	r2, [pc, #128]	; (8000598 <main+0x1fc>)
 8000516:	011b      	lsls	r3, r3, #4
 8000518:	4413      	add	r3, r2
 800051a:	3308      	adds	r3, #8
 800051c:	781a      	ldrb	r2, [r3, #0]
 800051e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000522:	491d      	ldr	r1, [pc, #116]	; (8000598 <main+0x1fc>)
 8000524:	011b      	lsls	r3, r3, #4
 8000526:	440b      	add	r3, r1
 8000528:	330a      	adds	r3, #10
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	4610      	mov	r0, r2
 8000530:	f000 fb14 	bl	8000b5c <sleep_motor>
				exoesk.absolute_pos[finger] = HOME_POSITION;
 8000534:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	3328      	adds	r3, #40	; 0x28
 800053c:	443b      	add	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	f823 2c20 	strh.w	r2, [r3, #-32]
				home_routine[finger] = referenced;
 8000544:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <main+0x1f8>)
 800054a:	2102      	movs	r1, #2
 800054c:	54d1      	strb	r1, [r2, r3]
		for(finger=0; finger<flength; finger++)
 800054e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000552:	3301      	adds	r3, #1
 8000554:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000558:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800055c:	2b04      	cmp	r3, #4
 800055e:	d9d0      	bls.n	8000502 <main+0x166>
			}

		}

		if(timeout_flg)
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <main+0x200>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	f43f af56 	beq.w	8000418 <main+0x7c>
		{
			finger_motion(&exoesk);
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f883 	bl	800067c <finger_motion>
			alive_fn();
 8000576:	f000 f919 	bl	80007ac <alive_fn>
			timeout_flg = 0;
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <main+0x200>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
	{
 8000580:	e74a      	b.n	8000418 <main+0x7c>
 8000582:	bf00      	nop
 8000584:	200000d8 	.word	0x200000d8
 8000588:	20000090 	.word	0x20000090
 800058c:	20000045 	.word	0x20000045
 8000590:	20000000 	.word	0x20000000
 8000594:	20000040 	.word	0x20000040
 8000598:	08003450 	.word	0x08003450
 800059c:	2000003c 	.word	0x2000003c

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b090      	sub	sp, #64	; 0x40
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	2228      	movs	r2, #40	; 0x28
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 ff3a 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	2310      	movs	r3, #16
 80005cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 f96c 	bl	80018b4 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005e2:	f000 fb4d 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fbda 	bl	8001db8 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800060a:	f000 fb39 	bl	8000c80 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3740      	adds	r7, #64	; 0x40
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <toggle_finger>:

/* USER CODE BEGIN 4 */

static void toggle_finger(st_exoesk * exoesk, enum_action act)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
	uint8_t finger = (act - deselect_thumb);
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	3b75      	subs	r3, #117	; 0x75
 8000628:	73fb      	strb	r3, [r7, #15]

	if(finger < flength){
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2b04      	cmp	r3, #4
 800062e:	d80f      	bhi.n	8000650 <toggle_finger+0x38>
		exoesk->fingers_in_op[finger % flength] = No;
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <toggle_finger+0x60>)
 8000634:	fba3 1302 	umull	r1, r3, r3, r2
 8000638:	0899      	lsrs	r1, r3, #2
 800063a:	460b      	mov	r3, r1
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	440b      	add	r3, r1
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	b2db      	uxtb	r3, r3
 8000644:	461a      	mov	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	751a      	strb	r2, [r3, #20]
	else
	{
		exoesk->fingers_in_op[finger % flength] = Yes;
	}

}
 800064e:	e00e      	b.n	800066e <toggle_finger+0x56>
		exoesk->fingers_in_op[finger % flength] = Yes;
 8000650:	7bfa      	ldrb	r2, [r7, #15]
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <toggle_finger+0x60>)
 8000654:	fba3 1302 	umull	r1, r3, r3, r2
 8000658:	0899      	lsrs	r1, r3, #2
 800065a:	460b      	mov	r3, r1
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	440b      	add	r3, r1
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	2201      	movs	r2, #1
 800066c:	751a      	strb	r2, [r3, #20]
}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	cccccccd 	.word	0xcccccccd

0800067c <finger_motion>:

static void finger_motion(st_exoesk * exoesk)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

	if(exoesk->in_operation)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7e5b      	ldrb	r3, [r3, #25]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <finger_motion+0x16>
	{
		send_step_pulses(exoesk);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 f805 	bl	800069c <send_step_pulses>
	}

}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <send_step_pulses>:

static void send_step_pulses(st_exoesk * exoesk)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

	uint8_t finger = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
	uint8_t counter = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73bb      	strb	r3, [r7, #14]

	for(finger=0; finger<flength; finger++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	e068      	b.n	8000784 <send_step_pulses+0xe8>
	{
		// if the motor finger has reached the go_to position it sleeps
		// as well as if the motor is moving back and the finger has reached the home position
		// or in other words if the go_to position is smaller than absolute position and the finger has reached the home position
		// then it has to stop, not if the motor is going on the other way.
		if((exoesk->absolute_pos[finger] == exoesk->go_to[finger]) || (is_finger_up(exoconfig[finger].home.pin) && exoesk->go_to[finger] < exoesk->absolute_pos[finger]))
 80006b2:	7bfa      	ldrb	r2, [r7, #15]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	3304      	adds	r3, #4
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	440b      	add	r3, r1
 80006c4:	885b      	ldrh	r3, [r3, #2]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d017      	beq.n	80006fa <send_step_pulses+0x5e>
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	4a36      	ldr	r2, [pc, #216]	; (80007a8 <send_step_pulses+0x10c>)
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	4413      	add	r3, r2
 80006d2:	330e      	adds	r3, #14
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fa9e 	bl	8000c18 <is_finger_up>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d01f      	beq.n	8000722 <send_step_pulses+0x86>
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	3304      	adds	r3, #4
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4413      	add	r3, r2
 80006ec:	885a      	ldrh	r2, [r3, #2]
 80006ee:	7bf9      	ldrb	r1, [r7, #15]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d213      	bcs.n	8000722 <send_step_pulses+0x86>
		{
			sleep_motor(exoconfig[finger].sleep.port, exoconfig[finger].sleep.pin);
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <send_step_pulses+0x10c>)
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	4413      	add	r3, r2
 8000702:	3308      	adds	r3, #8
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	4927      	ldr	r1, [pc, #156]	; (80007a8 <send_step_pulses+0x10c>)
 800070a:	011b      	lsls	r3, r3, #4
 800070c:	440b      	add	r3, r1
 800070e:	330a      	adds	r3, #10
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	4619      	mov	r1, r3
 8000714:	4610      	mov	r0, r2
 8000716:	f000 fa21 	bl	8000b5c <sleep_motor>
			counter++;
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	3301      	adds	r3, #1
 800071e:	73bb      	strb	r3, [r7, #14]
 8000720:	e02d      	b.n	800077e <send_step_pulses+0xe2>
		}
		else
		{
			send_pulse(exoconfig[finger].step.port, exoconfig[finger].step.pin);
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <send_step_pulses+0x10c>)
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	4413      	add	r3, r2
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	491e      	ldr	r1, [pc, #120]	; (80007a8 <send_step_pulses+0x10c>)
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	440b      	add	r3, r1
 8000734:	3302      	adds	r3, #2
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	4610      	mov	r0, r2
 800073c:	f000 fa4e 	bl	8000bdc <send_pulse>
			if(exoesk->go_to[finger] > exoesk->absolute_pos[finger])
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	3304      	adds	r3, #4
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	885a      	ldrh	r2, [r3, #2]
 800074c:	7bf9      	ldrb	r1, [r7, #15]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000754:	429a      	cmp	r2, r3
 8000756:	d909      	bls.n	800076c <send_step_pulses+0xd0>
			{
				exoesk->absolute_pos[finger]++;
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000760:	3201      	adds	r2, #1
 8000762:	b291      	uxth	r1, r2
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800076a:	e008      	b.n	800077e <send_step_pulses+0xe2>
			}
			else
			{
				exoesk->absolute_pos[finger]--;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000774:	3a01      	subs	r2, #1
 8000776:	b291      	uxth	r1, r2
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(finger=0; finger<flength; finger++)
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	3301      	adds	r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	2b04      	cmp	r3, #4
 8000788:	d993      	bls.n	80006b2 <send_step_pulses+0x16>
			}

		}

	}
	if(counter < flength)
 800078a:	7bbb      	ldrb	r3, [r7, #14]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d803      	bhi.n	8000798 <send_step_pulses+0xfc>
	{
		exoesk->in_operation = Yes;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	765a      	strb	r2, [r3, #25]
	else
	{
		exoesk->in_operation = No;
	}

}
 8000796:	e002      	b.n	800079e <send_step_pulses+0x102>
		exoesk->in_operation = No;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	765a      	strb	r2, [r3, #25]
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	08003450 	.word	0x08003450

080007ac <alive_fn>:

static void alive_fn(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	static uint16_t var = 16000;

	if(var > 0)
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <alive_fn+0x30>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d006      	beq.n	80007c6 <alive_fn+0x1a>
	{
		var--;
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <alive_fn+0x30>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	3b01      	subs	r3, #1
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <alive_fn+0x30>)
 80007c2:	801a      	strh	r2, [r3, #0]
	else
	{
		var = 16000;
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}
}
 80007c4:	e008      	b.n	80007d8 <alive_fn+0x2c>
		var = 16000;
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <alive_fn+0x30>)
 80007c8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007cc:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <alive_fn+0x34>)
 80007d4:	f001 f83d 	bl	8001852 <HAL_GPIO_TogglePin>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000010 	.word	0x20000010
 80007e0:	40011000 	.word	0x40011000

080007e4 <ref_routine_fn>:

static void ref_routine_fn(st_exoesk * exoesk)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	home_routine_fn(exoesk);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f833 	bl	8000858 <home_routine_fn>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <go_down_fn>:
static void go_down_fn(st_exoesk * exoesk)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
	exo_prepare(exoesk, Down, dfl_steps << stepping);
 8000802:	2304      	movs	r3, #4
 8000804:	461a      	mov	r2, r3
 8000806:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800080a:	4093      	lsls	r3, r2
 800080c:	b29b      	uxth	r3, r3
 800080e:	461a      	mov	r2, r3
 8000810:	2101      	movs	r1, #1
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f000 f884 	bl	8000920 <exo_prepare>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <go_up_fn>:
static void go_up_fn(st_exoesk * exoesk)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	exo_prepare(exoesk, Up, dfl_steps << stepping);
 8000828:	2304      	movs	r3, #4
 800082a:	461a      	mov	r2, r3
 800082c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000830:	4093      	lsls	r3, r2
 8000832:	b29b      	uxth	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 f871 	bl	8000920 <exo_prepare>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <sinewave_fn>:
static void sinewave_fn(st_exoesk * exoesk)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]

}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <home_routine_fn>:

static void home_routine_fn(st_exoesk * exoesk)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	for(uint8_t finger=thumb; finger<flength; finger++)
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e04e      	b.n	8000904 <home_routine_fn+0xac>
	{
		if(exoesk->fingers_in_op[finger])
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	7d1b      	ldrb	r3, [r3, #20]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d045      	beq.n	80008fe <home_routine_fn+0xa6>
		{
			if(is_finger_up(home_routine[finger]))
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	4a28      	ldr	r2, [pc, #160]	; (8000918 <home_routine_fn+0xc0>)
 8000876:	5cd3      	ldrb	r3, [r2, r3]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	b29b      	uxth	r3, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f9cb 	bl	8000c18 <is_finger_up>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d009      	beq.n	800089c <home_routine_fn+0x44>
			{
				exoesk->absolute_pos[finger] = HOME_POSITION;
 8000888:	7bfa      	ldrb	r2, [r7, #15]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2100      	movs	r1, #0
 800088e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				home_routine[finger] = referenced;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4a20      	ldr	r2, [pc, #128]	; (8000918 <home_routine_fn+0xc0>)
 8000896:	2102      	movs	r1, #2
 8000898:	54d1      	strb	r1, [r2, r3]
 800089a:	e030      	b.n	80008fe <home_routine_fn+0xa6>
			}
			else
			{
				set_direction(exoconfig[finger].direction.port, exoconfig[finger].direction.pin, Up);
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <home_routine_fn+0xc4>)
 80008a0:	011b      	lsls	r3, r3, #4
 80008a2:	4413      	add	r3, r2
 80008a4:	3304      	adds	r3, #4
 80008a6:	7818      	ldrb	r0, [r3, #0]
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <home_routine_fn+0xc4>)
 80008ac:	011b      	lsls	r3, r3, #4
 80008ae:	4413      	add	r3, r2
 80008b0:	3306      	adds	r3, #6
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	2200      	movs	r2, #0
 80008b6:	4619      	mov	r1, r3
 80008b8:	f000 f9c0 	bl	8000c3c <set_direction>
				exoesk->absolute_pos[finger] = UNKNOWN;
 80008bc:	7bfa      	ldrb	r2, [r7, #15]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				motor_wakeup(exoconfig[finger].sleep.port, exoconfig[finger].sleep.pin);
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <home_routine_fn+0xc4>)
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	4413      	add	r3, r2
 80008d0:	3308      	adds	r3, #8
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	4911      	ldr	r1, [pc, #68]	; (800091c <home_routine_fn+0xc4>)
 80008d8:	011b      	lsls	r3, r3, #4
 80008da:	440b      	add	r3, r1
 80008dc:	330a      	adds	r3, #10
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	4610      	mov	r0, r2
 80008e4:	f000 f95a 	bl	8000b9c <motor_wakeup>
				exoesk->go_to[finger] = HOME_POSITION;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	3304      	adds	r3, #4
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	2200      	movs	r2, #0
 80008f4:	805a      	strh	r2, [r3, #2]
				home_routine[finger] = lost;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <home_routine_fn+0xc0>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t finger=thumb; finger<flength; finger++)
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	3301      	adds	r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	2b04      	cmp	r3, #4
 8000908:	d9ad      	bls.n	8000866 <home_routine_fn+0xe>
			}
		}
	}
	exoesk->in_operation = Yes;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2201      	movs	r2, #1
 800090e:	765a      	strb	r2, [r3, #25]
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000040 	.word	0x20000040
 800091c:	08003450 	.word	0x08003450

08000920 <exo_prepare>:

static void exo_prepare(st_exoesk * exoesk, enum_motion direction, uint16_t steps_to_go)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
 800092c:	4613      	mov	r3, r2
 800092e:	803b      	strh	r3, [r7, #0]
	for(uint8_t finger=thumb; finger<flength; finger++)
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]
 8000934:	e061      	b.n	80009fa <exo_prepare+0xda>
	{
		if(exoesk->fingers_in_op[finger])
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	7d1b      	ldrb	r3, [r3, #20]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d058      	beq.n	80009f4 <exo_prepare+0xd4>
		{
			set_direction(exoconfig[finger].direction.port, exoconfig[finger].direction.pin, direction);
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	4a32      	ldr	r2, [pc, #200]	; (8000a10 <exo_prepare+0xf0>)
 8000946:	011b      	lsls	r3, r3, #4
 8000948:	4413      	add	r3, r2
 800094a:	3304      	adds	r3, #4
 800094c:	7818      	ldrb	r0, [r3, #0]
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <exo_prepare+0xf0>)
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	4413      	add	r3, r2
 8000956:	3306      	adds	r3, #6
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	78fa      	ldrb	r2, [r7, #3]
 800095c:	4619      	mov	r1, r3
 800095e:	f000 f96d 	bl	8000c3c <set_direction>
			motor_wakeup(exoconfig[finger].sleep.port, exoconfig[finger].sleep.pin);
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	4a2a      	ldr	r2, [pc, #168]	; (8000a10 <exo_prepare+0xf0>)
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	4413      	add	r3, r2
 800096a:	3308      	adds	r3, #8
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	4927      	ldr	r1, [pc, #156]	; (8000a10 <exo_prepare+0xf0>)
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	440b      	add	r3, r1
 8000976:	330a      	adds	r3, #10
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	4610      	mov	r0, r2
 800097e:	f000 f90d 	bl	8000b9c <motor_wakeup>

			if(direction == Down && exoesk->absolute_pos[finger] <= (MAX_POSITION-steps_to_go))
 8000982:	78fb      	ldrb	r3, [r7, #3]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d11b      	bne.n	80009c0 <exo_prepare+0xa0>
 8000988:	7bfa      	ldrb	r2, [r7, #15]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000990:	461a      	mov	r2, r3
 8000992:	883b      	ldrh	r3, [r7, #0]
 8000994:	f5c3 43bb 	rsb	r3, r3, #23936	; 0x5d80
 8000998:	3340      	adds	r3, #64	; 0x40
 800099a:	429a      	cmp	r2, r3
 800099c:	d810      	bhi.n	80009c0 <exo_prepare+0xa0>
			{
				exoesk->go_to[finger] += steps_to_go;
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	3304      	adds	r3, #4
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	8859      	ldrh	r1, [r3, #2]
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	883a      	ldrh	r2, [r7, #0]
 80009ae:	440a      	add	r2, r1
 80009b0:	b291      	uxth	r1, r2
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	3304      	adds	r3, #4
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	460a      	mov	r2, r1
 80009bc:	805a      	strh	r2, [r3, #2]
 80009be:	e019      	b.n	80009f4 <exo_prepare+0xd4>
			}
			// Si vas para arriba solo checa que lo que vas a avanzar no sea mas de lo permitido
			// es decir que la posicion en la que estas + lo que vas a avanzar
			else if(direction == Up && exoesk->absolute_pos[finger] >= steps_to_go )
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d116      	bne.n	80009f4 <exo_prepare+0xd4>
 80009c6:	7bfa      	ldrb	r2, [r7, #15]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80009ce:	883a      	ldrh	r2, [r7, #0]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d80f      	bhi.n	80009f4 <exo_prepare+0xd4>
			{
				exoesk->go_to[finger] -= steps_to_go;
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	3304      	adds	r3, #4
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	8859      	ldrh	r1, [r3, #2]
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	883a      	ldrh	r2, [r7, #0]
 80009e4:	1a8a      	subs	r2, r1, r2
 80009e6:	b291      	uxth	r1, r2
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	3304      	adds	r3, #4
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	4413      	add	r3, r2
 80009f0:	460a      	mov	r2, r1
 80009f2:	805a      	strh	r2, [r3, #2]
	for(uint8_t finger=thumb; finger<flength; finger++)
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	3301      	adds	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d99a      	bls.n	8000936 <exo_prepare+0x16>
			}


		}
	}
	exoesk->in_operation = Yes;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2201      	movs	r2, #1
 8000a04:	765a      	strb	r2, [r3, #25]
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	08003450 	.word	0x08003450

08000a14 <exo_init>:

static void exo_init(st_exoesk * exoesk)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	for(uint8_t finger=thumb; finger<flength; finger++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73fb      	strb	r3, [r7, #15]
 8000a20:	e007      	b.n	8000a32 <exo_init+0x1e>
	{
#ifdef test
		exoesk->fingers_in_op[index] = Yes;
#else
		exoesk->fingers_in_op[finger] = Yes;
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	4413      	add	r3, r2
 8000a28:	2201      	movs	r2, #1
 8000a2a:	751a      	strb	r2, [r3, #20]
	for(uint8_t finger=thumb; finger<flength; finger++)
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d9f4      	bls.n	8000a22 <exo_init+0xe>
#endif
	}

	home_routine_fn(exoesk);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff0d 	bl	8000858 <home_routine_fn>

	for(uint8_t finger=thumb; finger<flength; finger++)
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73bb      	strb	r3, [r7, #14]
 8000a42:	e007      	b.n	8000a54 <exo_init+0x40>
	{
#ifdef test
		exoesk->fingers_in_op[index] = No;
#else
		exoesk->fingers_in_op[finger] = No;
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	751a      	strb	r2, [r3, #20]
	for(uint8_t finger=thumb; finger<flength; finger++)
 8000a4e:	7bbb      	ldrb	r3, [r7, #14]
 8000a50:	3301      	adds	r3, #1
 8000a52:	73bb      	strb	r3, [r7, #14]
 8000a54:	7bbb      	ldrb	r3, [r7, #14]
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d9f4      	bls.n	8000a44 <exo_init+0x30>
#endif
	}

}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <gotopos_fn>:

static void gotopos_fn(st_exoesk * exoesk, uint16_t position)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	807b      	strh	r3, [r7, #2]
	for(uint8_t finger=thumb; finger<flength; finger++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]
 8000a74:	e054      	b.n	8000b20 <gotopos_fn+0xbc>
	{
		enum_motion direction;
		if(position > exoesk->absolute_pos[finger])
 8000a76:	7bfa      	ldrb	r2, [r7, #15]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a7e:	887a      	ldrh	r2, [r7, #2]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d910      	bls.n	8000aa6 <gotopos_fn+0x42>
		{
			direction = Down;
 8000a84:	2301      	movs	r3, #1
 8000a86:	73bb      	strb	r3, [r7, #14]
			exoesk->go_to[finger] = position - exoesk->absolute_pos[finger];
 8000a88:	7bfa      	ldrb	r2, [r7, #15]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	8879      	ldrh	r1, [r7, #2]
 8000a94:	1a8a      	subs	r2, r1, r2
 8000a96:	b291      	uxth	r1, r2
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	805a      	strh	r2, [r3, #2]
 8000aa4:	e00f      	b.n	8000ac6 <gotopos_fn+0x62>
		}
		else
		{
			direction = Up;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73bb      	strb	r3, [r7, #14]
			exoesk->go_to[finger] = exoesk->absolute_pos[finger] - position;
 8000aaa:	7bfa      	ldrb	r2, [r7, #15]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	887a      	ldrh	r2, [r7, #2]
 8000ab6:	1a8a      	subs	r2, r1, r2
 8000ab8:	b291      	uxth	r1, r2
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	3304      	adds	r3, #4
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	460a      	mov	r2, r1
 8000ac4:	805a      	strh	r2, [r3, #2]
		}

		if((*(exoesk->fingers_in_op) & (1<<finger)))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	7d1b      	ldrb	r3, [r3, #20]
 8000aca:	461a      	mov	r2, r3
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	fa42 f303 	asr.w	r3, r2, r3
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d01f      	beq.n	8000b1a <gotopos_fn+0xb6>
		{
			set_direction(exoconfig[finger].direction.port, exoconfig[finger].direction.pin, direction);
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <gotopos_fn+0xd0>)
 8000ade:	011b      	lsls	r3, r3, #4
 8000ae0:	4413      	add	r3, r2
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	7818      	ldrb	r0, [r3, #0]
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <gotopos_fn+0xd0>)
 8000aea:	011b      	lsls	r3, r3, #4
 8000aec:	4413      	add	r3, r2
 8000aee:	3306      	adds	r3, #6
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	7bba      	ldrb	r2, [r7, #14]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f000 f8a1 	bl	8000c3c <set_direction>
			motor_wakeup(exoconfig[finger].sleep.port, exoconfig[finger].sleep.pin);
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <gotopos_fn+0xd0>)
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	4413      	add	r3, r2
 8000b02:	3308      	adds	r3, #8
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	490a      	ldr	r1, [pc, #40]	; (8000b34 <gotopos_fn+0xd0>)
 8000b0a:	011b      	lsls	r3, r3, #4
 8000b0c:	440b      	add	r3, r1
 8000b0e:	330a      	adds	r3, #10
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	4619      	mov	r1, r3
 8000b14:	4610      	mov	r0, r2
 8000b16:	f000 f841 	bl	8000b9c <motor_wakeup>
	for(uint8_t finger=thumb; finger<flength; finger++)
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d9a7      	bls.n	8000a76 <gotopos_fn+0x12>

		}
	}
	exoesk->in_operation = Yes;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	765a      	strb	r2, [r3, #25]
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	08003450 	.word	0x08003450

08000b38 <clean_buffer>:

static void clean_buffer(uint8_t * buf)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	*buf = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
	buffer_status = empty;
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <clean_buffer+0x20>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000045 	.word	0x20000045

08000b5c <sleep_motor>:

static void sleep_motor(enum_ports port, uint16_t pin)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	460a      	mov	r2, r1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	80bb      	strh	r3, [r7, #4]
	if(port == portA)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d106      	bne.n	8000b80 <sleep_motor+0x24>
		HAL_GPIO_WritePin(GPIOA, pin, GPIO_PIN_RESET);
 8000b72:	88bb      	ldrh	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <sleep_motor+0x38>)
 8000b7a:	f000 fe52 	bl	8001822 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_RESET);
}
 8000b7e:	e005      	b.n	8000b8c <sleep_motor+0x30>
		HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_RESET);
 8000b80:	88bb      	ldrh	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	4804      	ldr	r0, [pc, #16]	; (8000b98 <sleep_motor+0x3c>)
 8000b88:	f000 fe4b 	bl	8001822 <HAL_GPIO_WritePin>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <motor_wakeup>:

static void motor_wakeup(enum_ports port, uint16_t pin)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	80bb      	strh	r3, [r7, #4]
	if(port == portA)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d106      	bne.n	8000bc0 <motor_wakeup+0x24>
		HAL_GPIO_WritePin(GPIOA, pin, GPIO_PIN_SET);
 8000bb2:	88bb      	ldrh	r3, [r7, #4]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <motor_wakeup+0x38>)
 8000bba:	f000 fe32 	bl	8001822 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_SET);
}
 8000bbe:	e005      	b.n	8000bcc <motor_wakeup+0x30>
		HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_SET);
 8000bc0:	88bb      	ldrh	r3, [r7, #4]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <motor_wakeup+0x3c>)
 8000bc8:	f000 fe2b 	bl	8001822 <HAL_GPIO_WritePin>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <send_pulse>:


static void send_pulse(enum_ports port, uint16_t pin)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	460a      	mov	r2, r1
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	80bb      	strh	r3, [r7, #4]
	if(port == portA)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d105      	bne.n	8000bfe <send_pulse+0x22>
		HAL_GPIO_TogglePin(GPIOA, pin);
 8000bf2:	88bb      	ldrh	r3, [r7, #4]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <send_pulse+0x34>)
 8000bf8:	f000 fe2b 	bl	8001852 <HAL_GPIO_TogglePin>
	else
		HAL_GPIO_TogglePin(GPIOB, pin);
}
 8000bfc:	e004      	b.n	8000c08 <send_pulse+0x2c>
		HAL_GPIO_TogglePin(GPIOB, pin);
 8000bfe:	88bb      	ldrh	r3, [r7, #4]
 8000c00:	4619      	mov	r1, r3
 8000c02:	4804      	ldr	r0, [pc, #16]	; (8000c14 <send_pulse+0x38>)
 8000c04:	f000 fe25 	bl	8001852 <HAL_GPIO_TogglePin>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40010800 	.word	0x40010800
 8000c14:	40010c00 	.word	0x40010c00

08000c18 <is_finger_up>:


static uint8_t is_finger_up(uint16_t finger_home_sensor)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
	return HAL_GPIO_ReadPin(GPIOB, finger_home_sensor);
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	4619      	mov	r1, r3
 8000c26:	4804      	ldr	r0, [pc, #16]	; (8000c38 <is_finger_up+0x20>)
 8000c28:	f000 fde4 	bl	80017f4 <HAL_GPIO_ReadPin>
 8000c2c:	4603      	mov	r3, r0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <set_direction>:

static void set_direction(enum_ports port, uint16_t pin, GPIO_PinState dir)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	460b      	mov	r3, r1
 8000c48:	80bb      	strh	r3, [r7, #4]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	71bb      	strb	r3, [r7, #6]
	if(port == portA)
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d106      	bne.n	8000c62 <set_direction+0x26>
		HAL_GPIO_WritePin(GPIOA, pin, dir);
 8000c54:	79ba      	ldrb	r2, [r7, #6]
 8000c56:	88bb      	ldrh	r3, [r7, #4]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4807      	ldr	r0, [pc, #28]	; (8000c78 <set_direction+0x3c>)
 8000c5c:	f000 fde1 	bl	8001822 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOB, pin, dir);
}
 8000c60:	e005      	b.n	8000c6e <set_direction+0x32>
		HAL_GPIO_WritePin(GPIOB, pin, dir);
 8000c62:	79ba      	ldrb	r2, [r7, #6]
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	4619      	mov	r1, r3
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <set_direction+0x40>)
 8000c6a:	f000 fdda 	bl	8001822 <HAL_GPIO_WritePin>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_MspInit+0x5c>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <HAL_MspInit+0x5c>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6193      	str	r3, [r2, #24]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_MspInit+0x5c>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_MspInit+0x5c>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_MspInit+0x5c>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_MspInit+0x5c>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_MspInit+0x60>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_MspInit+0x60>)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010000 	.word	0x40010000

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d36:	f000 f9fd 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000d42:	2020      	movs	r0, #32
 8000d44:	f000 fd9e 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000d48:	2040      	movs	r0, #64	; 0x40
 8000d4a:	f000 fd9b 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000d4e:	2080      	movs	r0, #128	; 0x80
 8000d50:	f000 fd98 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d54:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d58:	f000 fd94 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000d5c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d60:	f000 fd90 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <TIM2_IRQHandler+0x10>)
 8000d6e:	f001 fa53 	bl	8002218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000048 	.word	0x20000048

08000d7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <TIM3_IRQHandler+0x10>)
 8000d82:	f001 fa49 	bl	8002218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000090 	.word	0x20000090

08000d90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <USART3_IRQHandler+0x10>)
 8000d96:	f001 fe11 	bl	80029bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000d8 	.word	0x200000d8

08000da4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <MX_TIM2_Init+0x94>)
 8000dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_TIM2_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_TIM2_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_TIM2_Init+0x94>)
 8000de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000de6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <MX_TIM2_Init+0x94>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_TIM2_Init+0x94>)
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000df4:	4813      	ldr	r0, [pc, #76]	; (8000e44 <MX_TIM2_Init+0x94>)
 8000df6:	f001 f96d 	bl	80020d4 <HAL_TIM_Base_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e00:	f7ff ff3e 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <MX_TIM2_Init+0x94>)
 8000e12:	f001 fb09 	bl	8002428 <HAL_TIM_ConfigClockSource>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e1c:	f7ff ff30 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_TIM2_Init+0x94>)
 8000e2e:	f001 fcdf 	bl	80027f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e38:	f7ff ff22 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000048 	.word	0x20000048

08000e48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_TIM3_Init+0x90>)
 8000e66:	4a1d      	ldr	r2, [pc, #116]	; (8000edc <MX_TIM3_Init+0x94>)
 8000e68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_TIM3_Init+0x90>)
 8000e6c:	2232      	movs	r2, #50	; 0x32
 8000e6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_TIM3_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_TIM3_Init+0x90>)
 8000e78:	220a      	movs	r2, #10
 8000e7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_TIM3_Init+0x90>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_TIM3_Init+0x90>)
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e88:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <MX_TIM3_Init+0x90>)
 8000e8a:	f001 f923 	bl	80020d4 <HAL_TIM_Base_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000e94:	f7ff fef4 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_TIM3_Init+0x90>)
 8000ea6:	f001 fabf 	bl	8002428 <HAL_TIM_ConfigClockSource>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000eb0:	f7ff fee6 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_TIM3_Init+0x90>)
 8000ec2:	f001 fc95 	bl	80027f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000ecc:	f7ff fed8 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000090 	.word	0x20000090
 8000edc:	40000400 	.word	0x40000400

08000ee0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef0:	d114      	bne.n	8000f1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_TIM_Base_MspInit+0x78>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <HAL_TIM_Base_MspInit+0x78>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	61d3      	str	r3, [r2, #28]
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_TIM_Base_MspInit+0x78>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	201c      	movs	r0, #28
 8000f10:	f000 fa03 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f14:	201c      	movs	r0, #28
 8000f16:	f000 fa1c 	bl	8001352 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f1a:	e018      	b.n	8000f4e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <HAL_TIM_Base_MspInit+0x7c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d113      	bne.n	8000f4e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_TIM_Base_MspInit+0x78>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <HAL_TIM_Base_MspInit+0x78>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_TIM_Base_MspInit+0x78>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	201d      	movs	r0, #29
 8000f44:	f000 f9e9 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f48:	201d      	movs	r0, #29
 8000f4a:	f000 fa02 	bl	8001352 <HAL_NVIC_EnableIRQ>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40000400 	.word	0x40000400

08000f60 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_USART3_UART_Init+0x4c>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <MX_USART3_UART_Init+0x50>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <MX_USART3_UART_Init+0x4c>)
 8000f6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_USART3_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_USART3_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_USART3_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_USART3_UART_Init+0x4c>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_USART3_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_USART3_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_USART3_UART_Init+0x4c>)
 8000f98:	f001 fc9a 	bl	80028d0 <HAL_UART_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fa2:	f7ff fe6d 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000d8 	.word	0x200000d8
 8000fb0:	40004800 	.word	0x40004800

08000fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a20      	ldr	r2, [pc, #128]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d139      	bne.n	8001048 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <HAL_UART_MspInit+0xa0>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	4a1e      	ldr	r2, [pc, #120]	; (8001054 <HAL_UART_MspInit+0xa0>)
 8000fda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fde:	61d3      	str	r3, [r2, #28]
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_UART_MspInit+0xa0>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_UART_MspInit+0xa0>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a18      	ldr	r2, [pc, #96]	; (8001054 <HAL_UART_MspInit+0xa0>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_UART_MspInit+0xa0>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	4619      	mov	r1, r3
 8001018:	480f      	ldr	r0, [pc, #60]	; (8001058 <HAL_UART_MspInit+0xa4>)
 800101a:	f000 fa67 	bl	80014ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800101e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4619      	mov	r1, r3
 8001032:	4809      	ldr	r0, [pc, #36]	; (8001058 <HAL_UART_MspInit+0xa4>)
 8001034:	f000 fa5a 	bl	80014ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2027      	movs	r0, #39	; 0x27
 800103e:	f000 f96c 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001042:	2027      	movs	r0, #39	; 0x27
 8001044:	f000 f985 	bl	8001352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001048:	bf00      	nop
 800104a:	3720      	adds	r7, #32
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40004800 	.word	0x40004800
 8001054:	40021000 	.word	0x40021000
 8001058:	40010c00 	.word	0x40010c00

0800105c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800105c:	f7ff fea2 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001062:	490c      	ldr	r1, [pc, #48]	; (8001094 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
	  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001078:	4c09      	ldr	r4, [pc, #36]	; (80010a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001086:	f002 f9ab 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108a:	f7ff f987 	bl	800039c <main>
  bx lr
 800108e:	4770      	bx	lr
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001098:	080034d4 	.word	0x080034d4
  ldr r2, =_sbss
 800109c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80010a0:	20000124 	.word	0x20000124

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_Init+0x28>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f923 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	200f      	movs	r0, #15
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fde2 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f93b 	bl	800136e <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f903 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000014 	.word	0x20000014
 800112c:	2000001c 	.word	0x2000001c
 8001130:	20000018 	.word	0x20000018

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x20>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <HAL_IncTick+0x20>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	2000001c 	.word	0x2000001c
 8001154:	20000120 	.word	0x20000120

08001158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <HAL_GetTick+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000120 	.word	0x20000120

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4906      	ldr	r1, [pc, #24]	; (8001204 <__NVIC_EnableIRQ+0x34>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff90 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff2d 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff42 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff90 	bl	800125c <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5f 	bl	8001208 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff35 	bl	80011d0 <__NVIC_EnableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffa2 	bl	80012c0 <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d008      	beq.n	80013b0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2204      	movs	r2, #4
 80013a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e020      	b.n	80013f2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 020e 	bic.w	r2, r2, #14
 80013be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0201 	bic.w	r2, r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f202 	lsl.w	r2, r1, r2
 80013de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d005      	beq.n	8001420 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2204      	movs	r2, #4
 8001418:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e051      	b.n	80014c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 020e 	bic.w	r2, r2, #14
 800142e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a22      	ldr	r2, [pc, #136]	; (80014d0 <HAL_DMA_Abort_IT+0xd4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d029      	beq.n	800149e <HAL_DMA_Abort_IT+0xa2>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <HAL_DMA_Abort_IT+0xd8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d022      	beq.n	800149a <HAL_DMA_Abort_IT+0x9e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <HAL_DMA_Abort_IT+0xdc>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d01a      	beq.n	8001494 <HAL_DMA_Abort_IT+0x98>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <HAL_DMA_Abort_IT+0xe0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d012      	beq.n	800148e <HAL_DMA_Abort_IT+0x92>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <HAL_DMA_Abort_IT+0xe4>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00a      	beq.n	8001488 <HAL_DMA_Abort_IT+0x8c>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <HAL_DMA_Abort_IT+0xe8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d102      	bne.n	8001482 <HAL_DMA_Abort_IT+0x86>
 800147c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001480:	e00e      	b.n	80014a0 <HAL_DMA_Abort_IT+0xa4>
 8001482:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001486:	e00b      	b.n	80014a0 <HAL_DMA_Abort_IT+0xa4>
 8001488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800148c:	e008      	b.n	80014a0 <HAL_DMA_Abort_IT+0xa4>
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	e005      	b.n	80014a0 <HAL_DMA_Abort_IT+0xa4>
 8001494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001498:	e002      	b.n	80014a0 <HAL_DMA_Abort_IT+0xa4>
 800149a:	2310      	movs	r3, #16
 800149c:	e000      	b.n	80014a0 <HAL_DMA_Abort_IT+0xa4>
 800149e:	2301      	movs	r3, #1
 80014a0:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <HAL_DMA_Abort_IT+0xec>)
 80014a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	4798      	blx	r3
    } 
  }
  return status;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40020008 	.word	0x40020008
 80014d4:	4002001c 	.word	0x4002001c
 80014d8:	40020030 	.word	0x40020030
 80014dc:	40020044 	.word	0x40020044
 80014e0:	40020058 	.word	0x40020058
 80014e4:	4002006c 	.word	0x4002006c
 80014e8:	40020000 	.word	0x40020000

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b08b      	sub	sp, #44	; 0x2c
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fe:	e169      	b.n	80017d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001500:	2201      	movs	r2, #1
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	429a      	cmp	r2, r3
 800151a:	f040 8158 	bne.w	80017ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a9a      	ldr	r2, [pc, #616]	; (800178c <HAL_GPIO_Init+0x2a0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d05e      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 8001528:	4a98      	ldr	r2, [pc, #608]	; (800178c <HAL_GPIO_Init+0x2a0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d875      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 800152e:	4a98      	ldr	r2, [pc, #608]	; (8001790 <HAL_GPIO_Init+0x2a4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d058      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 8001534:	4a96      	ldr	r2, [pc, #600]	; (8001790 <HAL_GPIO_Init+0x2a4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d86f      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 800153a:	4a96      	ldr	r2, [pc, #600]	; (8001794 <HAL_GPIO_Init+0x2a8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d052      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 8001540:	4a94      	ldr	r2, [pc, #592]	; (8001794 <HAL_GPIO_Init+0x2a8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d869      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 8001546:	4a94      	ldr	r2, [pc, #592]	; (8001798 <HAL_GPIO_Init+0x2ac>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d04c      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 800154c:	4a92      	ldr	r2, [pc, #584]	; (8001798 <HAL_GPIO_Init+0x2ac>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d863      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 8001552:	4a92      	ldr	r2, [pc, #584]	; (800179c <HAL_GPIO_Init+0x2b0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d046      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 8001558:	4a90      	ldr	r2, [pc, #576]	; (800179c <HAL_GPIO_Init+0x2b0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d85d      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 800155e:	2b12      	cmp	r3, #18
 8001560:	d82a      	bhi.n	80015b8 <HAL_GPIO_Init+0xcc>
 8001562:	2b12      	cmp	r3, #18
 8001564:	d859      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 8001566:	a201      	add	r2, pc, #4	; (adr r2, 800156c <HAL_GPIO_Init+0x80>)
 8001568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156c:	080015e7 	.word	0x080015e7
 8001570:	080015c1 	.word	0x080015c1
 8001574:	080015d3 	.word	0x080015d3
 8001578:	08001615 	.word	0x08001615
 800157c:	0800161b 	.word	0x0800161b
 8001580:	0800161b 	.word	0x0800161b
 8001584:	0800161b 	.word	0x0800161b
 8001588:	0800161b 	.word	0x0800161b
 800158c:	0800161b 	.word	0x0800161b
 8001590:	0800161b 	.word	0x0800161b
 8001594:	0800161b 	.word	0x0800161b
 8001598:	0800161b 	.word	0x0800161b
 800159c:	0800161b 	.word	0x0800161b
 80015a0:	0800161b 	.word	0x0800161b
 80015a4:	0800161b 	.word	0x0800161b
 80015a8:	0800161b 	.word	0x0800161b
 80015ac:	0800161b 	.word	0x0800161b
 80015b0:	080015c9 	.word	0x080015c9
 80015b4:	080015dd 	.word	0x080015dd
 80015b8:	4a79      	ldr	r2, [pc, #484]	; (80017a0 <HAL_GPIO_Init+0x2b4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d013      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015be:	e02c      	b.n	800161a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	623b      	str	r3, [r7, #32]
          break;
 80015c6:	e029      	b.n	800161c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	3304      	adds	r3, #4
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e024      	b.n	800161c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	3308      	adds	r3, #8
 80015d8:	623b      	str	r3, [r7, #32]
          break;
 80015da:	e01f      	b.n	800161c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	330c      	adds	r3, #12
 80015e2:	623b      	str	r3, [r7, #32]
          break;
 80015e4:	e01a      	b.n	800161c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ee:	2304      	movs	r3, #4
 80015f0:	623b      	str	r3, [r7, #32]
          break;
 80015f2:	e013      	b.n	800161c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d105      	bne.n	8001608 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015fc:	2308      	movs	r3, #8
 80015fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	611a      	str	r2, [r3, #16]
          break;
 8001606:	e009      	b.n	800161c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001608:	2308      	movs	r3, #8
 800160a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	615a      	str	r2, [r3, #20]
          break;
 8001612:	e003      	b.n	800161c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
          break;
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x130>
          break;
 800161a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2bff      	cmp	r3, #255	; 0xff
 8001620:	d801      	bhi.n	8001626 <HAL_GPIO_Init+0x13a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	e001      	b.n	800162a <HAL_GPIO_Init+0x13e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3304      	adds	r3, #4
 800162a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2bff      	cmp	r3, #255	; 0xff
 8001630:	d802      	bhi.n	8001638 <HAL_GPIO_Init+0x14c>
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	e002      	b.n	800163e <HAL_GPIO_Init+0x152>
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	3b08      	subs	r3, #8
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	210f      	movs	r1, #15
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	401a      	ands	r2, r3
 8001650:	6a39      	ldr	r1, [r7, #32]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	431a      	orrs	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80b1 	beq.w	80017ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800166c:	4b4d      	ldr	r3, [pc, #308]	; (80017a4 <HAL_GPIO_Init+0x2b8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a4c      	ldr	r2, [pc, #304]	; (80017a4 <HAL_GPIO_Init+0x2b8>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <HAL_GPIO_Init+0x2b8>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001684:	4a48      	ldr	r2, [pc, #288]	; (80017a8 <HAL_GPIO_Init+0x2bc>)
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001690:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	220f      	movs	r2, #15
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4013      	ands	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a40      	ldr	r2, [pc, #256]	; (80017ac <HAL_GPIO_Init+0x2c0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d013      	beq.n	80016d8 <HAL_GPIO_Init+0x1ec>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a3f      	ldr	r2, [pc, #252]	; (80017b0 <HAL_GPIO_Init+0x2c4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00d      	beq.n	80016d4 <HAL_GPIO_Init+0x1e8>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a3e      	ldr	r2, [pc, #248]	; (80017b4 <HAL_GPIO_Init+0x2c8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d007      	beq.n	80016d0 <HAL_GPIO_Init+0x1e4>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a3d      	ldr	r2, [pc, #244]	; (80017b8 <HAL_GPIO_Init+0x2cc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_GPIO_Init+0x1e0>
 80016c8:	2303      	movs	r3, #3
 80016ca:	e006      	b.n	80016da <HAL_GPIO_Init+0x1ee>
 80016cc:	2304      	movs	r3, #4
 80016ce:	e004      	b.n	80016da <HAL_GPIO_Init+0x1ee>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e002      	b.n	80016da <HAL_GPIO_Init+0x1ee>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_GPIO_Init+0x1ee>
 80016d8:	2300      	movs	r3, #0
 80016da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016dc:	f002 0203 	and.w	r2, r2, #3
 80016e0:	0092      	lsls	r2, r2, #2
 80016e2:	4093      	lsls	r3, r2
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ea:	492f      	ldr	r1, [pc, #188]	; (80017a8 <HAL_GPIO_Init+0x2bc>)
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	492c      	ldr	r1, [pc, #176]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	608b      	str	r3, [r1, #8]
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	43db      	mvns	r3, r3
 800171a:	4928      	ldr	r1, [pc, #160]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800171c:	4013      	ands	r3, r2
 800171e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	4922      	ldr	r1, [pc, #136]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	60cb      	str	r3, [r1, #12]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	43db      	mvns	r3, r3
 8001742:	491e      	ldr	r1, [pc, #120]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001744:	4013      	ands	r3, r2
 8001746:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4918      	ldr	r1, [pc, #96]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	4914      	ldr	r1, [pc, #80]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800176c:	4013      	ands	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d021      	beq.n	80017c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	490e      	ldr	r1, [pc, #56]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
 8001788:	e021      	b.n	80017ce <HAL_GPIO_Init+0x2e2>
 800178a:	bf00      	nop
 800178c:	10320000 	.word	0x10320000
 8001790:	10310000 	.word	0x10310000
 8001794:	10220000 	.word	0x10220000
 8001798:	10210000 	.word	0x10210000
 800179c:	10120000 	.word	0x10120000
 80017a0:	10110000 	.word	0x10110000
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010000 	.word	0x40010000
 80017ac:	40010800 	.word	0x40010800
 80017b0:	40010c00 	.word	0x40010c00
 80017b4:	40011000 	.word	0x40011000
 80017b8:	40011400 	.word	0x40011400
 80017bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_GPIO_Init+0x304>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4909      	ldr	r1, [pc, #36]	; (80017f0 <HAL_GPIO_Init+0x304>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	3301      	adds	r3, #1
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f47f ae8e 	bne.w	8001500 <HAL_GPIO_Init+0x14>
  }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	372c      	adds	r7, #44	; 0x2c
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e001      	b.n	8001816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	807b      	strh	r3, [r7, #2]
 800182e:	4613      	mov	r3, r2
 8001830:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001832:	787b      	ldrb	r3, [r7, #1]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001838:	887a      	ldrh	r2, [r7, #2]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800183e:	e003      	b.n	8001848 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	041a      	lsls	r2, r3, #16
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	611a      	str	r2, [r3, #16]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001864:	887a      	ldrh	r2, [r7, #2]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4013      	ands	r3, r2
 800186a:	041a      	lsls	r2, r3, #16
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43d9      	mvns	r1, r3
 8001870:	887b      	ldrh	r3, [r7, #2]
 8001872:	400b      	ands	r3, r1
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	611a      	str	r2, [r3, #16]
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fce0 	bl	8000268 <HAL_GPIO_EXTI_Callback>
  }
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e272      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8087 	beq.w	80019e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d4:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d00c      	beq.n	80018fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e0:	4b8f      	ldr	r3, [pc, #572]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d112      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
 80018ec:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d10b      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fa:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d06c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x12c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d168      	bne.n	80019e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e24c      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x76>
 800191c:	4b80      	ldr	r3, [pc, #512]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a7f      	ldr	r2, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e02e      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x98>
 8001932:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a7a      	ldr	r2, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a77      	ldr	r2, [pc, #476]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0xbc>
 8001956:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a71      	ldr	r2, [pc, #452]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 8001970:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6a      	ldr	r2, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a67      	ldr	r2, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fbe2 	bl	8001158 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fbde 	bl	8001158 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e200      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xe4>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fbce 	bl	8001158 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fbca 	bl	8001158 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1ec      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x10c>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ee:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019fa:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
 8001a06:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1c0      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4939      	ldr	r1, [pc, #228]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fb83 	bl	8001158 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fb7f 	bl	8001158 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e1a1      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4927      	ldr	r1, [pc, #156]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fb62 	bl	8001158 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fb5e 	bl	8001158 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e180      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d03a      	beq.n	8001b38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d019      	beq.n	8001afe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fb42 	bl	8001158 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fb3e 	bl	8001158 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e160      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 face 	bl	8002098 <RCC_Delay>
 8001afc:	e01c      	b.n	8001b38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff fb28 	bl	8001158 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0a:	e00f      	b.n	8001b2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fb24 	bl	8001158 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d908      	bls.n	8001b2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e146      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	42420000 	.word	0x42420000
 8001b28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b92      	ldr	r3, [pc, #584]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e9      	bne.n	8001b0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a6 	beq.w	8001c92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b8b      	ldr	r3, [pc, #556]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b88      	ldr	r3, [pc, #544]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a87      	ldr	r2, [pc, #540]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b85      	ldr	r3, [pc, #532]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b82      	ldr	r3, [pc, #520]	; (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a7e      	ldr	r2, [pc, #504]	; (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fae5 	bl	8001158 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7ff fae1 	bl	8001158 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b64      	cmp	r3, #100	; 0x64
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e103      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b75      	ldr	r3, [pc, #468]	; (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x312>
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a6e      	ldr	r2, [pc, #440]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e02d      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x334>
 8001bce:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a69      	ldr	r2, [pc, #420]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a66      	ldr	r2, [pc, #408]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	e01c      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d10c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x356>
 8001bf0:	4b61      	ldr	r3, [pc, #388]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a60      	ldr	r2, [pc, #384]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	4b5e      	ldr	r3, [pc, #376]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a5d      	ldr	r2, [pc, #372]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	e00b      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001c0a:	4b5b      	ldr	r3, [pc, #364]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a5a      	ldr	r2, [pc, #360]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6213      	str	r3, [r2, #32]
 8001c16:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a57      	ldr	r2, [pc, #348]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
 8001c20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fa95 	bl	8001158 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff fa91 	bl	8001158 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0b1      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ee      	beq.n	8001c32 <HAL_RCC_OscConfig+0x37e>
 8001c54:	e014      	b.n	8001c80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fa7f 	bl	8001158 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fa7b 	bl	8001158 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e09b      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ee      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d105      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c86:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a3b      	ldr	r2, [pc, #236]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8087 	beq.w	8001daa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d061      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d146      	bne.n	8001d3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb0:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_RCC_OscConfig+0x4cc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fa4f 	bl	8001158 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff fa4b 	bl	8001158 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e06d      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce4:	d108      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4921      	ldr	r1, [pc, #132]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a19      	ldr	r1, [r3, #32]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	491b      	ldr	r1, [pc, #108]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fa1f 	bl	8001158 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff fa1b 	bl	8001158 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e03d      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x46a>
 8001d3c:	e035      	b.n	8001daa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_RCC_OscConfig+0x4cc>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fa08 	bl	8001158 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff fa04 	bl	8001158 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e026      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x498>
 8001d6a:	e01e      	b.n	8001daa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e019      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x500>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0d0      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d910      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 0207 	bic.w	r2, r3, #7
 8001de2:	4965      	ldr	r1, [pc, #404]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d040      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d115      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e073      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06b      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4936      	ldr	r1, [pc, #216]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea8:	f7ff f956 	bl	8001158 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7ff f952 	bl	8001158 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e053      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d210      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	4922      	ldr	r1, [pc, #136]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	490a      	ldr	r1, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x1c8>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1cc>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x1d0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff f8b4 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	080034a0 	.word	0x080034a0
 8001f84:	20000014 	.word	0x20000014
 8001f88:	20000018 	.word	0x20000018

08001f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d002      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x30>
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d003      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001fba:	e027      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fbe:	613b      	str	r3, [r7, #16]
      break;
 8001fc0:	e027      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0c9b      	lsrs	r3, r3, #18
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	4a17      	ldr	r2, [pc, #92]	; (8002028 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fcc:	5cd3      	ldrb	r3, [r2, r3]
 8001fce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d010      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	0c5b      	lsrs	r3, r3, #17
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	4a11      	ldr	r2, [pc, #68]	; (800202c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fee:	fb03 f202 	mul.w	r2, r3, r2
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e004      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0c      	ldr	r2, [pc, #48]	; (8002030 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002000:	fb02 f303 	mul.w	r3, r2, r3
 8002004:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	613b      	str	r3, [r7, #16]
      break;
 800200a:	e002      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_GetSysClockFreq+0x98>)
 800200e:	613b      	str	r3, [r7, #16]
      break;
 8002010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002012:	693b      	ldr	r3, [r7, #16]
}
 8002014:	4618      	mov	r0, r3
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	007a1200 	.word	0x007a1200
 8002028:	080034b8 	.word	0x080034b8
 800202c:	080034c8 	.word	0x080034c8
 8002030:	003d0900 	.word	0x003d0900

08002034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <HAL_RCC_GetHCLKFreq+0x10>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	20000014 	.word	0x20000014

08002048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800204c:	f7ff fff2 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	4903      	ldr	r1, [pc, #12]	; (800206c <HAL_RCC_GetPCLK1Freq+0x24>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	080034b0 	.word	0x080034b0

08002070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002074:	f7ff ffde 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	0adb      	lsrs	r3, r3, #11
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	4903      	ldr	r1, [pc, #12]	; (8002094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002086:	5ccb      	ldrb	r3, [r1, r3]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000
 8002094:	080034b0 	.word	0x080034b0

08002098 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <RCC_Delay+0x34>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <RCC_Delay+0x38>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	0a5b      	lsrs	r3, r3, #9
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020b4:	bf00      	nop
  }
  while (Delay --);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	60fa      	str	r2, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f9      	bne.n	80020b4 <RCC_Delay+0x1c>
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	20000014 	.word	0x20000014
 80020d0:	10624dd3 	.word	0x10624dd3

080020d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e041      	b.n	800216a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fef0 	bl	8000ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3304      	adds	r3, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4610      	mov	r0, r2
 8002114:	f000 fa74 	bl	8002600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	d001      	beq.n	800218c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e03a      	b.n	8002202 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a18      	ldr	r2, [pc, #96]	; (800220c <HAL_TIM_Base_Start_IT+0x98>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00e      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x58>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b6:	d009      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x58>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a14      	ldr	r2, [pc, #80]	; (8002210 <HAL_TIM_Base_Start_IT+0x9c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d004      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x58>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <HAL_TIM_Base_Start_IT+0xa0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d111      	bne.n	80021f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d010      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0201 	orr.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ee:	e007      	b.n	8002200 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	40012c00 	.word	0x40012c00
 8002210:	40000400 	.word	0x40000400
 8002214:	40000800 	.word	0x40000800

08002218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	d122      	bne.n	8002274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b02      	cmp	r3, #2
 800223a:	d11b      	bne.n	8002274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0202 	mvn.w	r2, #2
 8002244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f9b4 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 8002260:	e005      	b.n	800226e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f9a7 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f9b6 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b04      	cmp	r3, #4
 8002280:	d122      	bne.n	80022c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b04      	cmp	r3, #4
 800228e:	d11b      	bne.n	80022c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0204 	mvn.w	r2, #4
 8002298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f98a 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f97d 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f98c 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d122      	bne.n	800231c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d11b      	bne.n	800231c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0208 	mvn.w	r2, #8
 80022ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f960 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f953 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f962 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b10      	cmp	r3, #16
 8002328:	d122      	bne.n	8002370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b10      	cmp	r3, #16
 8002336:	d11b      	bne.n	8002370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0210 	mvn.w	r2, #16
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2208      	movs	r2, #8
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f936 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f929 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f938 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10e      	bne.n	800239c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0201 	mvn.w	r2, #1
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fd ffe8 	bl	800036c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b80      	cmp	r3, #128	; 0x80
 80023a8:	d10e      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	d107      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa7b 	bl	80028be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	2b40      	cmp	r3, #64	; 0x40
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d107      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8fc 	bl	80025ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b20      	cmp	r3, #32
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0220 	mvn.w	r2, #32
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fa46 	bl	80028ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_TIM_ConfigClockSource+0x1c>
 8002440:	2302      	movs	r3, #2
 8002442:	e0b4      	b.n	80025ae <HAL_TIM_ConfigClockSource+0x186>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800246a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247c:	d03e      	beq.n	80024fc <HAL_TIM_ConfigClockSource+0xd4>
 800247e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002482:	f200 8087 	bhi.w	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 8002486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248a:	f000 8086 	beq.w	800259a <HAL_TIM_ConfigClockSource+0x172>
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	d87f      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 8002494:	2b70      	cmp	r3, #112	; 0x70
 8002496:	d01a      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0xa6>
 8002498:	2b70      	cmp	r3, #112	; 0x70
 800249a:	d87b      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b60      	cmp	r3, #96	; 0x60
 800249e:	d050      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x11a>
 80024a0:	2b60      	cmp	r3, #96	; 0x60
 80024a2:	d877      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b50      	cmp	r3, #80	; 0x50
 80024a6:	d03c      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xfa>
 80024a8:	2b50      	cmp	r3, #80	; 0x50
 80024aa:	d873      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024ac:	2b40      	cmp	r3, #64	; 0x40
 80024ae:	d058      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x13a>
 80024b0:	2b40      	cmp	r3, #64	; 0x40
 80024b2:	d86f      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024b4:	2b30      	cmp	r3, #48	; 0x30
 80024b6:	d064      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024b8:	2b30      	cmp	r3, #48	; 0x30
 80024ba:	d86b      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d060      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d867      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d05c      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024c8:	2b10      	cmp	r3, #16
 80024ca:	d05a      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024cc:	e062      	b.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6899      	ldr	r1, [r3, #8]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f000 f968 	bl	80027b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	609a      	str	r2, [r3, #8]
      break;
 80024fa:	e04f      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6899      	ldr	r1, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f000 f951 	bl	80027b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800251e:	609a      	str	r2, [r3, #8]
      break;
 8002520:	e03c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	461a      	mov	r2, r3
 8002530:	f000 f8c8 	bl	80026c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2150      	movs	r1, #80	; 0x50
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f91f 	bl	800277e <TIM_ITRx_SetConfig>
      break;
 8002540:	e02c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	461a      	mov	r2, r3
 8002550:	f000 f8e6 	bl	8002720 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2160      	movs	r1, #96	; 0x60
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f90f 	bl	800277e <TIM_ITRx_SetConfig>
      break;
 8002560:	e01c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6859      	ldr	r1, [r3, #4]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	461a      	mov	r2, r3
 8002570:	f000 f8a8 	bl	80026c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2140      	movs	r1, #64	; 0x40
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f8ff 	bl	800277e <TIM_ITRx_SetConfig>
      break;
 8002580:	e00c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4619      	mov	r1, r3
 800258c:	4610      	mov	r0, r2
 800258e:	f000 f8f6 	bl	800277e <TIM_ITRx_SetConfig>
      break;
 8002592:	e003      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      break;
 8002598:	e000      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800259a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
	...

08002600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a29      	ldr	r2, [pc, #164]	; (80026b8 <TIM_Base_SetConfig+0xb8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00b      	beq.n	8002630 <TIM_Base_SetConfig+0x30>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261e:	d007      	beq.n	8002630 <TIM_Base_SetConfig+0x30>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a26      	ldr	r2, [pc, #152]	; (80026bc <TIM_Base_SetConfig+0xbc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d003      	beq.n	8002630 <TIM_Base_SetConfig+0x30>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <TIM_Base_SetConfig+0xc0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d108      	bne.n	8002642 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <TIM_Base_SetConfig+0xb8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00b      	beq.n	8002662 <TIM_Base_SetConfig+0x62>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002650:	d007      	beq.n	8002662 <TIM_Base_SetConfig+0x62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a19      	ldr	r2, [pc, #100]	; (80026bc <TIM_Base_SetConfig+0xbc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d003      	beq.n	8002662 <TIM_Base_SetConfig+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <TIM_Base_SetConfig+0xc0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d108      	bne.n	8002674 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <TIM_Base_SetConfig+0xb8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d103      	bne.n	80026a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	615a      	str	r2, [r3, #20]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40000800 	.word	0x40000800

080026c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f023 0201 	bic.w	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f023 030a 	bic.w	r3, r3, #10
 8002700:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	621a      	str	r2, [r3, #32]
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	f023 0210 	bic.w	r2, r3, #16
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800274a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	031b      	lsls	r3, r3, #12
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800275c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	621a      	str	r2, [r3, #32]
}
 8002774:	bf00      	nop
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	f043 0307 	orr.w	r3, r3, #7
 80027a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	609a      	str	r2, [r3, #8]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b087      	sub	sp, #28
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	021a      	lsls	r2, r3, #8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4313      	orrs	r3, r2
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	609a      	str	r2, [r3, #8]
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002804:	2302      	movs	r3, #2
 8002806:	e046      	b.n	8002896 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00e      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002854:	d009      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10c      	bne.n	8002884 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	4313      	orrs	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800

080028ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e042      	b.n	8002968 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe fb5c 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	; 0x24
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fcd5 	bl	80032c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b20      	cmp	r3, #32
 8002988:	d112      	bne.n	80029b0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_UART_Receive_IT+0x26>
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e00b      	b.n	80029b2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fab7 	bl	8002f1a <UART_Start_Receive_IT>
 80029ac:	4603      	mov	r3, r0
 80029ae:	e000      	b.n	80029b2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b0ba      	sub	sp, #232	; 0xe8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10f      	bne.n	8002a22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <HAL_UART_IRQHandler+0x66>
 8002a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fb93 	bl	8003146 <UART_Receive_IT>
      return;
 8002a20:	e25b      	b.n	8002eda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80de 	beq.w	8002be8 <HAL_UART_IRQHandler+0x22c>
 8002a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d106      	bne.n	8002a46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80d1 	beq.w	8002be8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <HAL_UART_IRQHandler+0xae>
 8002a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <HAL_UART_IRQHandler+0xd2>
 8002a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f043 0202 	orr.w	r2, r3, #2
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_UART_IRQHandler+0xf6>
 8002a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f043 0204 	orr.w	r2, r3, #4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d011      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x126>
 8002abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f043 0208 	orr.w	r2, r3, #8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 81f2 	beq.w	8002ed0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_UART_IRQHandler+0x14e>
 8002af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fb1e 	bl	8003146 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d103      	bne.n	8002b36 <HAL_UART_IRQHandler+0x17a>
 8002b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d04f      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fa28 	bl	8002f8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d041      	beq.n	8002bce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3314      	adds	r3, #20
 8002b50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b58:	e853 3f00 	ldrex	r3, [r3]
 8002b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3314      	adds	r3, #20
 8002b72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b86:	e841 2300 	strex	r3, r2, [r1]
 8002b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1d9      	bne.n	8002b4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d013      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	4a7e      	ldr	r2, [pc, #504]	; (8002d9c <HAL_UART_IRQHandler+0x3e0>)
 8002ba4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fc26 	bl	80013fc <HAL_DMA_Abort_IT>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d016      	beq.n	8002be4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	e00e      	b.n	8002be4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f993 	bl	8002ef2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	e00a      	b.n	8002be4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f98f 	bl	8002ef2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	e006      	b.n	8002be4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f98b 	bl	8002ef2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002be2:	e175      	b.n	8002ed0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be4:	bf00      	nop
    return;
 8002be6:	e173      	b.n	8002ed0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f040 814f 	bne.w	8002e90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8148 	beq.w	8002e90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8141 	beq.w	8002e90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 80b6 	beq.w	8002da0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8145 	beq.w	8002ed4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c52:	429a      	cmp	r2, r3
 8002c54:	f080 813e 	bcs.w	8002ed4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	f000 8088 	beq.w	8002d7c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c7a:	e853 3f00 	ldrex	r3, [r3]
 8002c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	330c      	adds	r3, #12
 8002c94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c98:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ca4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ca8:	e841 2300 	strex	r3, r2, [r1]
 8002cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1d9      	bne.n	8002c6c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3314      	adds	r3, #20
 8002cbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc2:	e853 3f00 	ldrex	r3, [r3]
 8002cc6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3314      	adds	r3, #20
 8002cd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cdc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ce4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ce8:	e841 2300 	strex	r3, r2, [r1]
 8002cec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e1      	bne.n	8002cb8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3314      	adds	r3, #20
 8002cfa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cfe:	e853 3f00 	ldrex	r3, [r3]
 8002d02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3314      	adds	r3, #20
 8002d14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d18:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d20:	e841 2300 	strex	r3, r2, [r1]
 8002d24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e3      	bne.n	8002cf4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4c:	f023 0310 	bic.w	r3, r3, #16
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d60:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d66:	e841 2300 	strex	r3, r2, [r1]
 8002d6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1e3      	bne.n	8002d3a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe fb05 	bl	8001386 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8b6 	bl	8002f04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d98:	e09c      	b.n	8002ed4 <HAL_UART_IRQHandler+0x518>
 8002d9a:	bf00      	nop
 8002d9c:	08003051 	.word	0x08003051
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 808e 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8089 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	330c      	adds	r3, #12
 8002dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002dea:	647a      	str	r2, [r7, #68]	; 0x44
 8002dec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002df2:	e841 2300 	strex	r3, r2, [r1]
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1e3      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	3314      	adds	r3, #20
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	e853 3f00 	ldrex	r3, [r3]
 8002e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3314      	adds	r3, #20
 8002e1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e22:	633a      	str	r2, [r7, #48]	; 0x30
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e2a:	e841 2300 	strex	r3, r2, [r1]
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1e3      	bne.n	8002dfe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	e853 3f00 	ldrex	r3, [r3]
 8002e52:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0310 	bic.w	r3, r3, #16
 8002e5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e68:	61fa      	str	r2, [r7, #28]
 8002e6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6c:	69b9      	ldr	r1, [r7, #24]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	e841 2300 	strex	r3, r2, [r1]
 8002e74:	617b      	str	r3, [r7, #20]
   return(result);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e3      	bne.n	8002e44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e86:	4619      	mov	r1, r3
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f83b 	bl	8002f04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e8e:	e023      	b.n	8002ed8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x4f4>
 8002e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f8e5 	bl	8003078 <UART_Transmit_IT>
    return;
 8002eae:	e014      	b.n	8002eda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00e      	beq.n	8002eda <HAL_UART_IRQHandler+0x51e>
 8002ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f924 	bl	8003116 <UART_EndTransmit_IT>
    return;
 8002ece:	e004      	b.n	8002eda <HAL_UART_IRQHandler+0x51e>
    return;
 8002ed0:	bf00      	nop
 8002ed2:	e002      	b.n	8002eda <HAL_UART_IRQHandler+0x51e>
      return;
 8002ed4:	bf00      	nop
 8002ed6:	e000      	b.n	8002eda <HAL_UART_IRQHandler+0x51e>
      return;
 8002ed8:	bf00      	nop
  }
}
 8002eda:	37e8      	adds	r7, #232	; 0xe8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	4613      	mov	r3, r2
 8002f26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	88fa      	ldrh	r2, [r7, #6]
 8002f38:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2222      	movs	r2, #34	; 0x22
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0220 	orr.w	r2, r2, #32
 8002f7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b095      	sub	sp, #84	; 0x54
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	330c      	adds	r3, #12
 8002f9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9e:	e853 3f00 	ldrex	r3, [r3]
 8002fa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fb4:	643a      	str	r2, [r7, #64]	; 0x40
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fbc:	e841 2300 	strex	r3, r2, [r1]
 8002fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e5      	bne.n	8002f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3314      	adds	r3, #20
 8002fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	e853 3f00 	ldrex	r3, [r3]
 8002fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f023 0301 	bic.w	r3, r3, #1
 8002fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3314      	adds	r3, #20
 8002fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff0:	e841 2300 	strex	r3, r2, [r1]
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e5      	bne.n	8002fc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	2b01      	cmp	r3, #1
 8003002:	d119      	bne.n	8003038 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	330c      	adds	r3, #12
 800300a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	60bb      	str	r3, [r7, #8]
   return(result);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f023 0310 	bic.w	r3, r3, #16
 800301a:	647b      	str	r3, [r7, #68]	; 0x44
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003024:	61ba      	str	r2, [r7, #24]
 8003026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	6979      	ldr	r1, [r7, #20]
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	613b      	str	r3, [r7, #16]
   return(result);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e5      	bne.n	8003004 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003046:	bf00      	nop
 8003048:	3754      	adds	r7, #84	; 0x54
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f7ff ff41 	bl	8002ef2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b21      	cmp	r3, #33	; 0x21
 800308a:	d13e      	bne.n	800310a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003094:	d114      	bne.n	80030c0 <UART_Transmit_IT+0x48>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d110      	bne.n	80030c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	1c9a      	adds	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	621a      	str	r2, [r3, #32]
 80030be:	e008      	b.n	80030d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	1c59      	adds	r1, r3, #1
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6211      	str	r1, [r2, #32]
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29b      	uxth	r3, r3
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4619      	mov	r1, r3
 80030e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003104:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff fed2 	bl	8002ee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b08c      	sub	sp, #48	; 0x30
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b22      	cmp	r3, #34	; 0x22
 8003158:	f040 80ae 	bne.w	80032b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003164:	d117      	bne.n	8003196 <UART_Receive_IT+0x50>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d113      	bne.n	8003196 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800316e:	2300      	movs	r3, #0
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	b29b      	uxth	r3, r3
 8003180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003184:	b29a      	uxth	r2, r3
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	1c9a      	adds	r2, r3, #2
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
 8003194:	e026      	b.n	80031e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a8:	d007      	beq.n	80031ba <UART_Receive_IT+0x74>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10a      	bne.n	80031c8 <UART_Receive_IT+0x82>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e008      	b.n	80031da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4619      	mov	r1, r3
 80031f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d15d      	bne.n	80032b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0220 	bic.w	r2, r2, #32
 8003206:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	2b01      	cmp	r3, #1
 800323c:	d135      	bne.n	80032aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	330c      	adds	r3, #12
 800324a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	613b      	str	r3, [r7, #16]
   return(result);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f023 0310 	bic.w	r3, r3, #16
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003264:	623a      	str	r2, [r7, #32]
 8003266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003268:	69f9      	ldr	r1, [r7, #28]
 800326a:	6a3a      	ldr	r2, [r7, #32]
 800326c:	e841 2300 	strex	r3, r2, [r1]
 8003270:	61bb      	str	r3, [r7, #24]
   return(result);
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e5      	bne.n	8003244 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b10      	cmp	r3, #16
 8003284:	d10a      	bne.n	800329c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032a0:	4619      	mov	r1, r3
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fe2e 	bl	8002f04 <HAL_UARTEx_RxEventCallback>
 80032a8:	e002      	b.n	80032b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fd f84a 	bl	8000344 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e002      	b.n	80032ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3730      	adds	r7, #48	; 0x30
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032fe:	f023 030c 	bic.w	r3, r3, #12
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	430b      	orrs	r3, r1
 800330a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2c      	ldr	r2, [pc, #176]	; (80033d8 <UART_SetConfig+0x114>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d103      	bne.n	8003334 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800332c:	f7fe fea0 	bl	8002070 <HAL_RCC_GetPCLK2Freq>
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	e002      	b.n	800333a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003334:	f7fe fe88 	bl	8002048 <HAL_RCC_GetPCLK1Freq>
 8003338:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009a      	lsls	r2, r3, #2
 8003344:	441a      	add	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	4a22      	ldr	r2, [pc, #136]	; (80033dc <UART_SetConfig+0x118>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	0119      	lsls	r1, r3, #4
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009a      	lsls	r2, r3, #2
 8003364:	441a      	add	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <UART_SetConfig+0x118>)
 8003372:	fba3 0302 	umull	r0, r3, r3, r2
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2064      	movs	r0, #100	; 0x64
 800337a:	fb00 f303 	mul.w	r3, r0, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	3332      	adds	r3, #50	; 0x32
 8003384:	4a15      	ldr	r2, [pc, #84]	; (80033dc <UART_SetConfig+0x118>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003390:	4419      	add	r1, r3
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	009a      	lsls	r2, r3, #2
 800339c:	441a      	add	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <UART_SetConfig+0x118>)
 80033aa:	fba3 0302 	umull	r0, r3, r3, r2
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2064      	movs	r0, #100	; 0x64
 80033b2:	fb00 f303 	mul.w	r3, r0, r3
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	3332      	adds	r3, #50	; 0x32
 80033bc:	4a07      	ldr	r2, [pc, #28]	; (80033dc <UART_SetConfig+0x118>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	f003 020f 	and.w	r2, r3, #15
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	440a      	add	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40013800 	.word	0x40013800
 80033dc:	51eb851f 	.word	0x51eb851f

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	2600      	movs	r6, #0
 80033e4:	4d0c      	ldr	r5, [pc, #48]	; (8003418 <__libc_init_array+0x38>)
 80033e6:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e8:	1b64      	subs	r4, r4, r5
 80033ea:	10a4      	asrs	r4, r4, #2
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	f000 f822 	bl	8003438 <_init>
 80033f4:	2600      	movs	r6, #0
 80033f6:	4d0a      	ldr	r5, [pc, #40]	; (8003420 <__libc_init_array+0x40>)
 80033f8:	4c0a      	ldr	r4, [pc, #40]	; (8003424 <__libc_init_array+0x44>)
 80033fa:	1b64      	subs	r4, r4, r5
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f855 3b04 	ldr.w	r3, [r5], #4
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	080034cc 	.word	0x080034cc
 800341c:	080034cc 	.word	0x080034cc
 8003420:	080034cc 	.word	0x080034cc
 8003424:	080034d0 	.word	0x080034d0

08003428 <memset>:
 8003428:	4603      	mov	r3, r0
 800342a:	4402      	add	r2, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	f803 1b01 	strb.w	r1, [r3], #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <_init>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	bf00      	nop
 800343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343e:	bc08      	pop	{r3}
 8003440:	469e      	mov	lr, r3
 8003442:	4770      	bx	lr

08003444 <_fini>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr
