
exo-esqueleto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003800  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800390c  0800390c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003958  08003958  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003958  08003958  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003958  08003958  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000010  08003970  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003970  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d47f  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f90  00000000  00000000  0002d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0002f448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  000300e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001713f  00000000  00000000  00030cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e18c  00000000  00000000  00047dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008692a  00000000  00000000  00055f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc8b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d0  00000000  00000000  000dc908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080038f4 	.word	0x080038f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080038f4 	.word	0x080038f4

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b3c      	ldr	r3, [pc, #240]	; (8000254 <MX_GPIO_Init+0x108>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a3b      	ldr	r2, [pc, #236]	; (8000254 <MX_GPIO_Init+0x108>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b39      	ldr	r3, [pc, #228]	; (8000254 <MX_GPIO_Init+0x108>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b36      	ldr	r3, [pc, #216]	; (8000254 <MX_GPIO_Init+0x108>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a35      	ldr	r2, [pc, #212]	; (8000254 <MX_GPIO_Init+0x108>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b33      	ldr	r3, [pc, #204]	; (8000254 <MX_GPIO_Init+0x108>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b30      	ldr	r3, [pc, #192]	; (8000254 <MX_GPIO_Init+0x108>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a2f      	ldr	r2, [pc, #188]	; (8000254 <MX_GPIO_Init+0x108>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b2d      	ldr	r3, [pc, #180]	; (8000254 <MX_GPIO_Init+0x108>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80001ae:	482a      	ldr	r0, [pc, #168]	; (8000258 <MX_GPIO_Init+0x10c>)
 80001b0:	f001 f93d 	bl	800142e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	4828      	ldr	r0, [pc, #160]	; (800025c <MX_GPIO_Init+0x110>)
 80001ba:	f001 f938 	bl	800142e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_3, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	f248 0108 	movw	r1, #32776	; 0x8008
 80001c4:	4826      	ldr	r0, [pc, #152]	; (8000260 <MX_GPIO_Init+0x114>)
 80001c6:	f001 f932 	bl	800142e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80001ca:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d0:	2301      	movs	r3, #1
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d8:	2302      	movs	r3, #2
 80001da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001dc:	f107 0310 	add.w	r3, r7, #16
 80001e0:	4619      	mov	r1, r3
 80001e2:	481d      	ldr	r0, [pc, #116]	; (8000258 <MX_GPIO_Init+0x10c>)
 80001e4:	f000 ff88 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80001e8:	2310      	movs	r3, #16
 80001ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f4:	2302      	movs	r3, #2
 80001f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	4817      	ldr	r0, [pc, #92]	; (800025c <MX_GPIO_Init+0x110>)
 8000200:	f000 ff7a 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000204:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000208:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <MX_GPIO_Init+0x118>)
 800020c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800020e:	2302      	movs	r3, #2
 8000210:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000212:	f107 0310 	add.w	r3, r7, #16
 8000216:	4619      	mov	r1, r3
 8000218:	4810      	ldr	r0, [pc, #64]	; (800025c <MX_GPIO_Init+0x110>)
 800021a:	f000 ff6d 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3;
 800021e:	f248 0308 	movw	r3, #32776	; 0x8008
 8000222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000224:	2301      	movs	r3, #1
 8000226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000228:	2300      	movs	r3, #0
 800022a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022c:	2302      	movs	r3, #2
 800022e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	480a      	ldr	r0, [pc, #40]	; (8000260 <MX_GPIO_Init+0x114>)
 8000238:	f000 ff5e 	bl	80010f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2017      	movs	r0, #23
 8000242:	f000 fe70 	bl	8000f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000246:	2017      	movs	r0, #23
 8000248:	f000 fe89 	bl	8000f5e <HAL_NVIC_EnableIRQ>

}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40021000 	.word	0x40021000
 8000258:	40011000 	.word	0x40011000
 800025c:	40010800 	.word	0x40010800
 8000260:	40010c00 	.word	0x40010c00
 8000264:	10110000 	.word	0x10110000

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fd22 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f898 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f7ff ff6a 	bl	800014c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000278:	f000 fc78 	bl	8000b6c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800027c:	f000 fb24 	bl	80008c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000280:	f000 fbb8 	bl	80009f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	static enum_action action = halt_state;
	static st_step_position position = {0};
	//uint16_t steps = 0;

	HAL_UART_Receive_IT(&huart3, &buffer, sizeof(buffer));
 8000284:	2201      	movs	r2, #1
 8000286:	493d      	ldr	r1, [pc, #244]	; (800037c <main+0x114>)
 8000288:	483d      	ldr	r0, [pc, #244]	; (8000380 <main+0x118>)
 800028a:	f002 fd62 	bl	8002d52 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800028e:	483d      	ldr	r0, [pc, #244]	; (8000384 <main+0x11c>)
 8000290:	f001 fd76 	bl	8001d80 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000294:	2100      	movs	r1, #0
 8000296:	483c      	ldr	r0, [pc, #240]	; (8000388 <main+0x120>)
 8000298:	f001 fe1c 	bl	8001ed4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800029c:	2104      	movs	r1, #4
 800029e:	483a      	ldr	r0, [pc, #232]	; (8000388 <main+0x120>)
 80002a0:	f001 fe18 	bl	8001ed4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80002a4:	2108      	movs	r1, #8
 80002a6:	4838      	ldr	r0, [pc, #224]	; (8000388 <main+0x120>)
 80002a8:	f001 fe14 	bl	8001ed4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80002ac:	210c      	movs	r1, #12
 80002ae:	4836      	ldr	r0, [pc, #216]	; (8000388 <main+0x120>)
 80002b0:	f001 fe10 	bl	8001ed4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(full == buffer_status)
 80002b4:	4b35      	ldr	r3, [pc, #212]	; (800038c <main+0x124>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d131      	bne.n	8000322 <main+0xba>
		{
			action = read_action();
 80002be:	f000 f919 	bl	80004f4 <read_action>
 80002c2:	4603      	mov	r3, r0
 80002c4:	461a      	mov	r2, r3
 80002c6:	4b32      	ldr	r3, [pc, #200]	; (8000390 <main+0x128>)
 80002c8:	701a      	strb	r2, [r3, #0]
			if(action == emergency_rst)
 80002ca:	4b31      	ldr	r3, [pc, #196]	; (8000390 <main+0x128>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d106      	bne.n	80002e0 <main+0x78>
			{
				op_has_started = NO;
 80002d2:	4b30      	ldr	r3, [pc, #192]	; (8000394 <main+0x12c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
				home_routine = lost;
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <main+0x130>)
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
 80002de:	e019      	b.n	8000314 <main+0xac>
			}
			else if(action % 2 == active)
 80002e0:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <main+0x128>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <main+0x92>
			{
				start_action(action);
 80002ee:	4b28      	ldr	r3, [pc, #160]	; (8000390 <main+0x128>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 f9ca 	bl	800068c <start_action>
 80002f8:	e00c      	b.n	8000314 <main+0xac>
			}
			else if(action % 2 == passive)
 80002fa:	4b25      	ldr	r3, [pc, #148]	; (8000390 <main+0x128>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	b2db      	uxtb	r3, r3
 8000304:	2b00      	cmp	r3, #0
 8000306:	d105      	bne.n	8000314 <main+0xac>
			{

			}
			else
			{
				op_has_started = NO;
 8000308:	4b22      	ldr	r3, [pc, #136]	; (8000394 <main+0x12c>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
				home_routine = lost;
 800030e:	4b22      	ldr	r3, [pc, #136]	; (8000398 <main+0x130>)
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
			}
			clean_buffer();
 8000314:	f000 fa02 	bl	800071c <clean_buffer>
			HAL_UART_Receive_IT(&huart3, &buffer, sizeof(buffer));
 8000318:	2201      	movs	r2, #1
 800031a:	4918      	ldr	r1, [pc, #96]	; (800037c <main+0x114>)
 800031c:	4818      	ldr	r0, [pc, #96]	; (8000380 <main+0x118>)
 800031e:	f002 fd18 	bl	8002d52 <HAL_UART_Receive_IT>

		}

		if(home_routine == home)
 8000322:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <main+0x130>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b01      	cmp	r3, #1
 800032a:	d10a      	bne.n	8000342 <main+0xda>
		{
			sleep_motor();
 800032c:	f000 fa06 	bl	800073c <sleep_motor>
			op_has_started = NO;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <main+0x12c>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
			position.absolute_pos = 0;
 8000336:	4b19      	ldr	r3, [pc, #100]	; (800039c <main+0x134>)
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
			home_routine = referenced;
 800033c:	4b16      	ldr	r3, [pc, #88]	; (8000398 <main+0x130>)
 800033e:	2202      	movs	r2, #2
 8000340:	701a      	strb	r2, [r3, #0]
		}

		if(one_msec_flag)
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <main+0x138>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0b3      	beq.n	80002b4 <main+0x4c>
		{
			if(op_has_started)
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <main+0x12c>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d00d      	beq.n	8000370 <main+0x108>
			{
				if(send_step_pulses(&position, action) == FINISH)
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <main+0x128>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4619      	mov	r1, r3
 800035a:	4810      	ldr	r0, [pc, #64]	; (800039c <main+0x134>)
 800035c:	f000 f924 	bl	80005a8 <send_step_pulses>
 8000360:	4603      	mov	r3, r0
 8000362:	2b01      	cmp	r3, #1
 8000364:	d104      	bne.n	8000370 <main+0x108>
				{
					sleep_motor();
 8000366:	f000 f9e9 	bl	800073c <sleep_motor>
					op_has_started = NO;
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <main+0x12c>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
				}
			}
			one_second_pwm();
 8000370:	f000 f968 	bl	8000644 <one_second_pwm>
			one_msec_flag = 0;
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <main+0x138>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
		if(full == buffer_status)
 800037a:	e79b      	b.n	80002b4 <main+0x4c>
 800037c:	2000002c 	.word	0x2000002c
 8000380:	200000d0 	.word	0x200000d0
 8000384:	20000088 	.word	0x20000088
 8000388:	20000040 	.word	0x20000040
 800038c:	20000034 	.word	0x20000034
 8000390:	20000000 	.word	0x20000000
 8000394:	20000035 	.word	0x20000035
 8000398:	2000002e 	.word	0x2000002e
 800039c:	20000038 	.word	0x20000038
 80003a0:	2000002d 	.word	0x2000002d

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b090      	sub	sp, #64	; 0x40
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	2228      	movs	r2, #40	; 0x28
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f003 fa96 	bl	80038e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ca:	2301      	movs	r3, #1
 80003cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ce:	2310      	movs	r3, #16
 80003d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d2:	2300      	movs	r3, #0
 80003d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	f107 0318 	add.w	r3, r7, #24
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 f870 	bl	80014c0 <HAL_RCC_OscConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003e6:	f000 f9d7 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ea:	230f      	movs	r3, #15
 80003ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fade 	bl	80019c4 <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800040e:	f000 f9c3 	bl	8000798 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3740      	adds	r7, #64	; 0x40
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000426:	88fb      	ldrh	r3, [r7, #6]
 8000428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800042c:	d020      	beq.n	8000470 <HAL_GPIO_EXTI_Callback+0x54>
 800042e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000432:	dc1f      	bgt.n	8000474 <HAL_GPIO_EXTI_Callback+0x58>
 8000434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000438:	d01e      	beq.n	8000478 <HAL_GPIO_EXTI_Callback+0x5c>
 800043a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800043e:	dc19      	bgt.n	8000474 <HAL_GPIO_EXTI_Callback+0x58>
 8000440:	2b80      	cmp	r3, #128	; 0x80
 8000442:	d01b      	beq.n	800047c <HAL_GPIO_EXTI_Callback+0x60>
 8000444:	2b80      	cmp	r3, #128	; 0x80
 8000446:	dc15      	bgt.n	8000474 <HAL_GPIO_EXTI_Callback+0x58>
 8000448:	2b20      	cmp	r3, #32
 800044a:	d002      	beq.n	8000452 <HAL_GPIO_EXTI_Callback+0x36>
 800044c:	2b40      	cmp	r3, #64	; 0x40
 800044e:	d017      	beq.n	8000480 <HAL_GPIO_EXTI_Callback+0x64>
	case GPIO_PIN_8:
		break;
	case GPIO_PIN_9:
		break;
	default:
		break;
 8000450:	e010      	b.n	8000474 <HAL_GPIO_EXTI_Callback+0x58>
		if(home_routine == lost)
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_GPIO_EXTI_Callback+0x74>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2b00      	cmp	r3, #0
 800045a:	d113      	bne.n	8000484 <HAL_GPIO_EXTI_Callback+0x68>
			home_routine = home;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_GPIO_EXTI_Callback+0x74>)
 800045e:	2201      	movs	r2, #1
 8000460:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (const uint8_t *) ack, sizeof(ack), 100);
 8000462:	2364      	movs	r3, #100	; 0x64
 8000464:	221d      	movs	r2, #29
 8000466:	490b      	ldr	r1, [pc, #44]	; (8000494 <HAL_GPIO_EXTI_Callback+0x78>)
 8000468:	480b      	ldr	r0, [pc, #44]	; (8000498 <HAL_GPIO_EXTI_Callback+0x7c>)
 800046a:	f002 fbef 	bl	8002c4c <HAL_UART_Transmit>
		break;
 800046e:	e009      	b.n	8000484 <HAL_GPIO_EXTI_Callback+0x68>
		break;
 8000470:	bf00      	nop
 8000472:	e008      	b.n	8000486 <HAL_GPIO_EXTI_Callback+0x6a>
		break;
 8000474:	bf00      	nop
 8000476:	e006      	b.n	8000486 <HAL_GPIO_EXTI_Callback+0x6a>
		break;
 8000478:	bf00      	nop
 800047a:	e004      	b.n	8000486 <HAL_GPIO_EXTI_Callback+0x6a>
		break;
 800047c:	bf00      	nop
 800047e:	e002      	b.n	8000486 <HAL_GPIO_EXTI_Callback+0x6a>
		break;
 8000480:	bf00      	nop
 8000482:	e000      	b.n	8000486 <HAL_GPIO_EXTI_Callback+0x6a>
		break;
 8000484:	bf00      	nop
	}
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	2000002e 	.word	0x2000002e
 8000494:	0800390c 	.word	0x0800390c
 8000498:	200000d0 	.word	0x200000d0

0800049c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	//waits until buffer is empty again
	if(empty == buffer_status){
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <HAL_UART_RxCpltCallback+0x24>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d102      	bne.n	80004b4 <HAL_UART_RxCpltCallback+0x18>
		buffer_status = full;
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <HAL_UART_RxCpltCallback+0x24>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
	}
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000034 	.word	0x20000034

080004c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a06      	ldr	r2, [pc, #24]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d104      	bne.n	80004e0 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		if(~one_msec_flag)
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
		{
			one_msec_flag = 1;
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80004dc:	2201      	movs	r2, #1
 80004de:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40000400 	.word	0x40000400
 80004f0:	2000002d 	.word	0x2000002d

080004f4 <read_action>:

static enum_action read_action(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	//compare byte
	switch(buffer){
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <read_action+0x74>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b68      	cmp	r3, #104	; 0x68
 80004fe:	d023      	beq.n	8000548 <read_action+0x54>
 8000500:	2b68      	cmp	r3, #104	; 0x68
 8000502:	dc2d      	bgt.n	8000560 <read_action+0x6c>
 8000504:	2b66      	cmp	r3, #102	; 0x66
 8000506:	d00f      	beq.n	8000528 <read_action+0x34>
 8000508:	2b66      	cmp	r3, #102	; 0x66
 800050a:	dc29      	bgt.n	8000560 <read_action+0x6c>
 800050c:	2b62      	cmp	r3, #98	; 0x62
 800050e:	d013      	beq.n	8000538 <read_action+0x44>
 8000510:	2b62      	cmp	r3, #98	; 0x62
 8000512:	dc25      	bgt.n	8000560 <read_action+0x6c>
 8000514:	2b2b      	cmp	r3, #43	; 0x2b
 8000516:	d021      	beq.n	800055c <read_action+0x68>
 8000518:	2b2b      	cmp	r3, #43	; 0x2b
 800051a:	dc21      	bgt.n	8000560 <read_action+0x6c>
 800051c:	2b00      	cmp	r3, #0
 800051e:	d01b      	beq.n	8000558 <read_action+0x64>
 8000520:	2b1b      	cmp	r3, #27
 8000522:	d11d      	bne.n	8000560 <read_action+0x6c>
	case '\e':
		return emergency_rst;
 8000524:	2300      	movs	r3, #0
 8000526:	e01c      	b.n	8000562 <read_action+0x6e>
	case 'f':
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052e:	480f      	ldr	r0, [pc, #60]	; (800056c <read_action+0x78>)
 8000530:	f000 ff7d 	bl	800142e <HAL_GPIO_WritePin>
		return moving_forward;
 8000534:	2302      	movs	r3, #2
 8000536:	e014      	b.n	8000562 <read_action+0x6e>
	case 'b':
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053e:	480b      	ldr	r0, [pc, #44]	; (800056c <read_action+0x78>)
 8000540:	f000 ff75 	bl	800142e <HAL_GPIO_WritePin>
		return moving_backward;
 8000544:	2304      	movs	r3, #4
 8000546:	e00c      	b.n	8000562 <read_action+0x6e>
	case 'h':
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <read_action+0x78>)
 8000550:	f000 ff6d 	bl	800142e <HAL_GPIO_WritePin>
		return reference_routine;
 8000554:	2306      	movs	r3, #6
 8000556:	e004      	b.n	8000562 <read_action+0x6e>
	case 0:
		return tx_succeed;
 8000558:	2303      	movs	r3, #3
 800055a:	e002      	b.n	8000562 <read_action+0x6e>
	case '+':
		return halt_state;
 800055c:	2305      	movs	r3, #5
 800055e:	e000      	b.n	8000562 <read_action+0x6e>
	default:
		return halt_state;
 8000560:	2305      	movs	r3, #5
	}
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	2000002c 	.word	0x2000002c
 800056c:	40011000 	.word	0x40011000

08000570 <set_pwm>:

static void set_pwm(uint16_t pwm){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <set_pwm+0x34>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm);
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <set_pwm+0x34>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	88fa      	ldrh	r2, [r7, #6]
 8000588:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwm);
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <set_pwm+0x34>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	88fa      	ldrh	r2, [r7, #6]
 8000590:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwm);
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <set_pwm+0x34>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	88fa      	ldrh	r2, [r7, #6]
 8000598:	641a      	str	r2, [r3, #64]	; 0x40
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	20000040 	.word	0x20000040

080005a8 <send_step_pulses>:

static uint8_t send_step_pulses(st_step_position * position, enum_action act)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]

	if(steps_to_go > 0)
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <send_step_pulses+0x98>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d03c      	beq.n	8000636 <send_step_pulses+0x8e>
	{
		switch(act)
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	2b06      	cmp	r3, #6
 80005c0:	d006      	beq.n	80005d0 <send_step_pulses+0x28>
 80005c2:	2b06      	cmp	r3, #6
 80005c4:	dc32      	bgt.n	800062c <send_step_pulses+0x84>
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d022      	beq.n	8000610 <send_step_pulses+0x68>
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	d00b      	beq.n	80005e6 <send_step_pulses+0x3e>
 80005ce:	e02d      	b.n	800062c <send_step_pulses+0x84>
		{
		case reference_routine:
			if(is_motor_home()){
 80005d0:	f000 f8d6 	bl	8000780 <is_motor_home>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <send_step_pulses+0x36>
				return FINISH;
 80005da:	2301      	movs	r3, #1
 80005dc:	e02c      	b.n	8000638 <send_step_pulses+0x90>
			}
			else
			{
				send_pulse();
 80005de:	f000 f8c5 	bl	800076c <send_pulse>
				return 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	e028      	b.n	8000638 <send_step_pulses+0x90>
			}
		case moving_backward:
			if(is_motor_home()){
 80005e6:	f000 f8cb 	bl	8000780 <is_motor_home>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <send_step_pulses+0x4c>
				return FINISH;
 80005f0:	2301      	movs	r3, #1
 80005f2:	e021      	b.n	8000638 <send_step_pulses+0x90>
			}
			else
			{
				send_pulse();
 80005f4:	f000 f8ba 	bl	800076c <send_pulse>
				position->absolute_pos--;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	1e5a      	subs	r2, r3, #1
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]
				steps_to_go--;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <send_step_pulses+0x98>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3b01      	subs	r3, #1
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <send_step_pulses+0x98>)
 800060a:	6013      	str	r3, [r2, #0]
				return 0;
 800060c:	2300      	movs	r3, #0
 800060e:	e013      	b.n	8000638 <send_step_pulses+0x90>
			}

		case moving_forward:
			send_pulse();
 8000610:	f000 f8ac 	bl	800076c <send_pulse>
			position->absolute_pos++;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	601a      	str	r2, [r3, #0]
			steps_to_go--;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <send_step_pulses+0x98>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	3b01      	subs	r3, #1
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <send_step_pulses+0x98>)
 8000626:	6013      	str	r3, [r2, #0]
			return 0;
 8000628:	2300      	movs	r3, #0
 800062a:	e005      	b.n	8000638 <send_step_pulses+0x90>
		default:
			steps_to_go = 0;
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <send_step_pulses+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
			return FINISH;
 8000632:	2301      	movs	r3, #1
 8000634:	e000      	b.n	8000638 <send_step_pulses+0x90>
		}

	}
	else{
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
		return FINISH;
 8000636:	2301      	movs	r3, #1
	}
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000030 	.word	0x20000030

08000644 <one_second_pwm>:

static void one_second_pwm(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	static uint16_t var = 999;

	set_pwm(var << 6);
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <one_second_pwm+0x40>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	019b      	lsls	r3, r3, #6
 800064e:	b29b      	uxth	r3, r3
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff8d 	bl	8000570 <set_pwm>
	if(var > 0)
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <one_second_pwm+0x40>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <one_second_pwm+0x28>
	{
		var--;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <one_second_pwm+0x40>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	3b01      	subs	r3, #1
 8000664:	b29a      	uxth	r2, r3
 8000666:	4b07      	ldr	r3, [pc, #28]	; (8000684 <one_second_pwm+0x40>)
 8000668:	801a      	strh	r2, [r3, #0]
	}
	else{
		var = 999;
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}
}
 800066a:	e008      	b.n	800067e <one_second_pwm+0x3a>
		var = 999;
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <one_second_pwm+0x40>)
 800066e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000672:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <one_second_pwm+0x44>)
 800067a:	f000 fef0 	bl	800145e <HAL_GPIO_TogglePin>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000002 	.word	0x20000002
 8000688:	40011000 	.word	0x40011000

0800068c <start_action>:

void start_action(enum_action act){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]

	switch(act)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b06      	cmp	r3, #6
 800069a:	d006      	beq.n	80006aa <start_action+0x1e>
 800069c:	2b06      	cmp	r3, #6
 800069e:	dc2c      	bgt.n	80006fa <start_action+0x6e>
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d01c      	beq.n	80006de <start_action+0x52>
 80006a4:	2b04      	cmp	r3, #4
 80006a6:	d00c      	beq.n	80006c2 <start_action+0x36>
 80006a8:	e027      	b.n	80006fa <start_action+0x6e>
	{
	case reference_routine:
		home_routine = lost;
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <start_action+0x84>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
		motor_wakeup();
 80006b0:	f000 f850 	bl	8000754 <motor_wakeup>
		steps_to_go = HOME_STEPS;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <start_action+0x88>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
		op_has_started = YES;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <start_action+0x8c>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
		break;
 80006c0:	e022      	b.n	8000708 <start_action+0x7c>
	case moving_backward:
		motor_wakeup();
 80006c2:	f000 f847 	bl	8000754 <motor_wakeup>
		steps_to_go = dfl_steps << stepping;
 80006c6:	2304      	movs	r3, #4
 80006c8:	461a      	mov	r2, r3
 80006ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006ce:	4093      	lsls	r3, r2
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <start_action+0x88>)
 80006d4:	601a      	str	r2, [r3, #0]
		op_has_started = YES;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <start_action+0x8c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
		break;
 80006dc:	e014      	b.n	8000708 <start_action+0x7c>
	case moving_forward:
		motor_wakeup();
 80006de:	f000 f839 	bl	8000754 <motor_wakeup>
		steps_to_go = dfl_steps << stepping;
 80006e2:	2304      	movs	r3, #4
 80006e4:	461a      	mov	r2, r3
 80006e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006ea:	4093      	lsls	r3, r2
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <start_action+0x88>)
 80006f0:	601a      	str	r2, [r3, #0]
		op_has_started = YES;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <start_action+0x8c>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
		break;
 80006f8:	e006      	b.n	8000708 <start_action+0x7c>
	default:
		steps_to_go = 0;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <start_action+0x88>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
		op_has_started = NO;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <start_action+0x8c>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
		break;
 8000706:	bf00      	nop
	}

}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000002e 	.word	0x2000002e
 8000714:	20000030 	.word	0x20000030
 8000718:	20000035 	.word	0x20000035

0800071c <clean_buffer>:

void clean_buffer()
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	buffer = 0;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <clean_buffer+0x18>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
	buffer_status = empty;
 8000726:	4b04      	ldr	r3, [pc, #16]	; (8000738 <clean_buffer+0x1c>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	2000002c 	.word	0x2000002c
 8000738:	20000034 	.word	0x20000034

0800073c <sleep_motor>:

void sleep_motor()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000746:	4802      	ldr	r0, [pc, #8]	; (8000750 <sleep_motor+0x14>)
 8000748:	f000 fe71 	bl	800142e <HAL_GPIO_WritePin>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40010c00 	.word	0x40010c00

08000754 <motor_wakeup>:

void motor_wakeup()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800075e:	4802      	ldr	r0, [pc, #8]	; (8000768 <motor_wakeup+0x14>)
 8000760:	f000 fe65 	bl	800142e <HAL_GPIO_WritePin>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40010c00 	.word	0x40010c00

0800076c <send_pulse>:


void send_pulse(void){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000770:	2110      	movs	r1, #16
 8000772:	4802      	ldr	r0, [pc, #8]	; (800077c <send_pulse+0x10>)
 8000774:	f000 fe73 	bl	800145e <HAL_GPIO_TogglePin>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40010800 	.word	0x40010800

08000780 <is_motor_home>:


uint8_t is_motor_home(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000784:	2120      	movs	r1, #32
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <is_motor_home+0x14>)
 8000788:	f000 fe3a 	bl	8001400 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
}
 800078e:	4618      	mov	r0, r3
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40010800 	.word	0x40010800

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <HAL_MspInit+0x5c>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <HAL_MspInit+0x5c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_MspInit+0x5c>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_MspInit+0x5c>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <HAL_MspInit+0x5c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_MspInit+0x5c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_MspInit+0x60>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_MspInit+0x60>)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	40021000 	.word	0x40021000
 8000804:	40010000 	.word	0x40010000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084e:	f000 fa77 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}

08000856 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800085a:	2020      	movs	r0, #32
 800085c:	f000 fe18 	bl	8001490 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000860:	2040      	movs	r0, #64	; 0x40
 8000862:	f000 fe15 	bl	8001490 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000866:	2080      	movs	r0, #128	; 0x80
 8000868:	f000 fe12 	bl	8001490 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800086c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000870:	f000 fe0e 	bl	8001490 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000874:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000878:	f000 fe0a 	bl	8001490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <TIM2_IRQHandler+0x10>)
 8000886:	f001 fbc7 	bl	8002018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000040 	.word	0x20000040

08000894 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <TIM3_IRQHandler+0x10>)
 800089a:	f001 fbbd 	bl	8002018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000088 	.word	0x20000088

080008a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <USART3_IRQHandler+0x10>)
 80008ae:	f002 fa75 	bl	8002d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000d0 	.word	0x200000d0

080008bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08e      	sub	sp, #56	; 0x38
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
 80008f4:	615a      	str	r2, [r3, #20]
 80008f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f8:	4b3d      	ldr	r3, [pc, #244]	; (80009f0 <MX_TIM2_Init+0x128>)
 80008fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000900:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <MX_TIM2_Init+0x128>)
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b3a      	ldr	r3, [pc, #232]	; (80009f0 <MX_TIM2_Init+0x128>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800090c:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <MX_TIM2_Init+0x128>)
 800090e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000912:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b36      	ldr	r3, [pc, #216]	; (80009f0 <MX_TIM2_Init+0x128>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091a:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <MX_TIM2_Init+0x128>)
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000920:	4833      	ldr	r0, [pc, #204]	; (80009f0 <MX_TIM2_Init+0x128>)
 8000922:	f001 f9dd 	bl	8001ce0 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800092c:	f7ff ff34 	bl	8000798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800093a:	4619      	mov	r1, r3
 800093c:	482c      	ldr	r0, [pc, #176]	; (80009f0 <MX_TIM2_Init+0x128>)
 800093e:	f001 fd35 	bl	80023ac <HAL_TIM_ConfigClockSource>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000948:	f7ff ff26 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800094c:	4828      	ldr	r0, [pc, #160]	; (80009f0 <MX_TIM2_Init+0x128>)
 800094e:	f001 fa69 	bl	8001e24 <HAL_TIM_PWM_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000958:	f7ff ff1e 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000964:	f107 0320 	add.w	r3, r7, #32
 8000968:	4619      	mov	r1, r3
 800096a:	4821      	ldr	r0, [pc, #132]	; (80009f0 <MX_TIM2_Init+0x128>)
 800096c:	f002 f8ae 	bl	8002acc <HAL_TIMEx_MasterConfigSynchronization>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000976:	f7ff ff0f 	bl	8000798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097a:	2360      	movs	r3, #96	; 0x60
 800097c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	4817      	ldr	r0, [pc, #92]	; (80009f0 <MX_TIM2_Init+0x128>)
 8000992:	f001 fc49 	bl	8002228 <HAL_TIM_PWM_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800099c:	f7ff fefc 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2204      	movs	r2, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_TIM2_Init+0x128>)
 80009a8:	f001 fc3e 	bl	8002228 <HAL_TIM_PWM_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80009b2:	f7ff fef1 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2208      	movs	r2, #8
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_TIM2_Init+0x128>)
 80009be:	f001 fc33 	bl	8002228 <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80009c8:	f7ff fee6 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	220c      	movs	r2, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <MX_TIM2_Init+0x128>)
 80009d4:	f001 fc28 	bl	8002228 <HAL_TIM_PWM_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80009de:	f7ff fedb 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009e2:	4803      	ldr	r0, [pc, #12]	; (80009f0 <MX_TIM2_Init+0x128>)
 80009e4:	f000 f892 	bl	8000b0c <HAL_TIM_MspPostInit>

}
 80009e8:	bf00      	nop
 80009ea:	3738      	adds	r7, #56	; 0x38
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000040 	.word	0x20000040

080009f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a12:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <MX_TIM3_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a18:	2232      	movs	r2, #50	; 0x32
 8000a1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a24:	220a      	movs	r2, #10
 8000a26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a34:	4813      	ldr	r0, [pc, #76]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a36:	f001 f953 	bl	8001ce0 <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000a40:	f7ff feaa 	bl	8000798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a52:	f001 fcab 	bl	80023ac <HAL_TIM_ConfigClockSource>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000a5c:	f7ff fe9c 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a6e:	f002 f82d 	bl	8002acc <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000a78:	f7ff fe8e 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000088 	.word	0x20000088
 8000a88:	40000400 	.word	0x40000400

08000a8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a9c:	d114      	bne.n	8000ac8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <HAL_TIM_Base_MspInit+0x78>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <HAL_TIM_Base_MspInit+0x78>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	61d3      	str	r3, [r2, #28]
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_TIM_Base_MspInit+0x78>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	201c      	movs	r0, #28
 8000abc:	f000 fa33 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ac0:	201c      	movs	r0, #28
 8000ac2:	f000 fa4c 	bl	8000f5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ac6:	e018      	b.n	8000afa <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_TIM_Base_MspInit+0x7c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d113      	bne.n	8000afa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_TIM_Base_MspInit+0x78>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <HAL_TIM_Base_MspInit+0x78>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	61d3      	str	r3, [r2, #28]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_TIM_Base_MspInit+0x78>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	201d      	movs	r0, #29
 8000af0:	f000 fa19 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000af4:	201d      	movs	r0, #29
 8000af6:	f000 fa32 	bl	8000f5e <HAL_NVIC_EnableIRQ>
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40000400 	.word	0x40000400

08000b0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b2a:	d117      	bne.n	8000b5c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_TIM_MspPostInit+0x58>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <HAL_TIM_MspPostInit+0x58>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_TIM_MspPostInit+0x58>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b44:	230f      	movs	r3, #15
 8000b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	4619      	mov	r1, r3
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <HAL_TIM_MspPostInit+0x5c>)
 8000b58:	f000 face 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3720      	adds	r7, #32
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010800 	.word	0x40010800

08000b6c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_USART3_UART_Init+0x50>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000ba4:	f002 f802 	bl	8002bac <HAL_UART_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bae:	f7ff fdf3 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000d0 	.word	0x200000d0
 8000bbc:	40004800 	.word	0x40004800

08000bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a20      	ldr	r2, [pc, #128]	; (8000c5c <HAL_UART_MspInit+0x9c>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d139      	bne.n	8000c54 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <HAL_UART_MspInit+0xa0>)
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <HAL_UART_MspInit+0xa0>)
 8000be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bea:	61d3      	str	r3, [r2, #28]
 8000bec:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <HAL_UART_MspInit+0xa0>)
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf8:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <HAL_UART_MspInit+0xa0>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <HAL_UART_MspInit+0xa0>)
 8000bfe:	f043 0308 	orr.w	r3, r3, #8
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_UART_MspInit+0xa0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	4619      	mov	r1, r3
 8000c24:	480f      	ldr	r0, [pc, #60]	; (8000c64 <HAL_UART_MspInit+0xa4>)
 8000c26:	f000 fa67 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4809      	ldr	r0, [pc, #36]	; (8000c64 <HAL_UART_MspInit+0xa4>)
 8000c40:	f000 fa5a 	bl	80010f8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2027      	movs	r0, #39	; 0x27
 8000c4a:	f000 f96c 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c4e:	2027      	movs	r0, #39	; 0x27
 8000c50:	f000 f985 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40004800 	.word	0x40004800
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010c00 	.word	0x40010c00

08000c68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c68:	f7ff fe28 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c6e:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c70:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
	  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c84:	4c09      	ldr	r4, [pc, #36]	; (8000cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c92:	f002 fe03 	bl	800389c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c96:	f7ff fae7 	bl	8000268 <main>
  bx lr
 8000c9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ca4:	08003960 	.word	0x08003960
  ldr r2, =_sbss
 8000ca8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cac:	2000011c 	.word	0x2000011c

08000cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x28>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x28>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f923 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	200f      	movs	r0, #15
 8000ccc:	f000 f808 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fd68 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x54>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x58>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f93b 	bl	8000f7a <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00e      	b.n	8000d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d80a      	bhi.n	8000d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f000 f903 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <HAL_InitTick+0x5c>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000004 	.word	0x20000004
 8000d38:	2000000c 	.word	0x2000000c
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x20>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <HAL_IncTick+0x20>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	2000000c 	.word	0x2000000c
 8000d60:	20000118 	.word	0x20000118

08000d64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <HAL_GetTick+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	20000118 	.word	0x20000118

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4906      	ldr	r1, [pc, #24]	; (8000e10 <__NVIC_EnableIRQ+0x34>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff90 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff2d 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff42 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff90 	bl	8000e68 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5f 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff35 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b085      	sub	sp, #20
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d008      	beq.n	8000fbc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2204      	movs	r2, #4
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e020      	b.n	8000ffe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020e 	bic.w	r2, r2, #14
 8000fca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d005      	beq.n	800102c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2204      	movs	r2, #4
 8001024:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e051      	b.n	80010d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 020e 	bic.w	r2, r2, #14
 800103a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a22      	ldr	r2, [pc, #136]	; (80010dc <HAL_DMA_Abort_IT+0xd4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d029      	beq.n	80010aa <HAL_DMA_Abort_IT+0xa2>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <HAL_DMA_Abort_IT+0xd8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d022      	beq.n	80010a6 <HAL_DMA_Abort_IT+0x9e>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <HAL_DMA_Abort_IT+0xdc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01a      	beq.n	80010a0 <HAL_DMA_Abort_IT+0x98>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <HAL_DMA_Abort_IT+0xe0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d012      	beq.n	800109a <HAL_DMA_Abort_IT+0x92>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <HAL_DMA_Abort_IT+0xe4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00a      	beq.n	8001094 <HAL_DMA_Abort_IT+0x8c>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_DMA_Abort_IT+0xe8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d102      	bne.n	800108e <HAL_DMA_Abort_IT+0x86>
 8001088:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800108c:	e00e      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 800108e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001092:	e00b      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 8001094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001098:	e008      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 800109a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109e:	e005      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 80010a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a4:	e002      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 80010a6:	2310      	movs	r3, #16
 80010a8:	e000      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 80010aa:	2301      	movs	r3, #1
 80010ac:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <HAL_DMA_Abort_IT+0xec>)
 80010ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	4798      	blx	r3
    } 
  }
  return status;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40020008 	.word	0x40020008
 80010e0:	4002001c 	.word	0x4002001c
 80010e4:	40020030 	.word	0x40020030
 80010e8:	40020044 	.word	0x40020044
 80010ec:	40020058 	.word	0x40020058
 80010f0:	4002006c 	.word	0x4002006c
 80010f4:	40020000 	.word	0x40020000

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b08b      	sub	sp, #44	; 0x2c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	e169      	b.n	80013e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800110c:	2201      	movs	r2, #1
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 8158 	bne.w	80013da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4a9a      	ldr	r2, [pc, #616]	; (8001398 <HAL_GPIO_Init+0x2a0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d05e      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001134:	4a98      	ldr	r2, [pc, #608]	; (8001398 <HAL_GPIO_Init+0x2a0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d875      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800113a:	4a98      	ldr	r2, [pc, #608]	; (800139c <HAL_GPIO_Init+0x2a4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d058      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001140:	4a96      	ldr	r2, [pc, #600]	; (800139c <HAL_GPIO_Init+0x2a4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d86f      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001146:	4a96      	ldr	r2, [pc, #600]	; (80013a0 <HAL_GPIO_Init+0x2a8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d052      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 800114c:	4a94      	ldr	r2, [pc, #592]	; (80013a0 <HAL_GPIO_Init+0x2a8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d869      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001152:	4a94      	ldr	r2, [pc, #592]	; (80013a4 <HAL_GPIO_Init+0x2ac>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d04c      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001158:	4a92      	ldr	r2, [pc, #584]	; (80013a4 <HAL_GPIO_Init+0x2ac>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d863      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800115e:	4a92      	ldr	r2, [pc, #584]	; (80013a8 <HAL_GPIO_Init+0x2b0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d046      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001164:	4a90      	ldr	r2, [pc, #576]	; (80013a8 <HAL_GPIO_Init+0x2b0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d85d      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800116a:	2b12      	cmp	r3, #18
 800116c:	d82a      	bhi.n	80011c4 <HAL_GPIO_Init+0xcc>
 800116e:	2b12      	cmp	r3, #18
 8001170:	d859      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <HAL_GPIO_Init+0x80>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	080011f3 	.word	0x080011f3
 800117c:	080011cd 	.word	0x080011cd
 8001180:	080011df 	.word	0x080011df
 8001184:	08001221 	.word	0x08001221
 8001188:	08001227 	.word	0x08001227
 800118c:	08001227 	.word	0x08001227
 8001190:	08001227 	.word	0x08001227
 8001194:	08001227 	.word	0x08001227
 8001198:	08001227 	.word	0x08001227
 800119c:	08001227 	.word	0x08001227
 80011a0:	08001227 	.word	0x08001227
 80011a4:	08001227 	.word	0x08001227
 80011a8:	08001227 	.word	0x08001227
 80011ac:	08001227 	.word	0x08001227
 80011b0:	08001227 	.word	0x08001227
 80011b4:	08001227 	.word	0x08001227
 80011b8:	08001227 	.word	0x08001227
 80011bc:	080011d5 	.word	0x080011d5
 80011c0:	080011e9 	.word	0x080011e9
 80011c4:	4a79      	ldr	r2, [pc, #484]	; (80013ac <HAL_GPIO_Init+0x2b4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ca:	e02c      	b.n	8001226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e029      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	3304      	adds	r3, #4
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e024      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	3308      	adds	r3, #8
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e01f      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	330c      	adds	r3, #12
 80011ee:	623b      	str	r3, [r7, #32]
          break;
 80011f0:	e01a      	b.n	8001228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fa:	2304      	movs	r3, #4
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e013      	b.n	8001228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d105      	bne.n	8001214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001208:	2308      	movs	r3, #8
 800120a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	611a      	str	r2, [r3, #16]
          break;
 8001212:	e009      	b.n	8001228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	615a      	str	r2, [r3, #20]
          break;
 800121e:	e003      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x130>
          break;
 8001226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2bff      	cmp	r3, #255	; 0xff
 800122c:	d801      	bhi.n	8001232 <HAL_GPIO_Init+0x13a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	e001      	b.n	8001236 <HAL_GPIO_Init+0x13e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3304      	adds	r3, #4
 8001236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2bff      	cmp	r3, #255	; 0xff
 800123c:	d802      	bhi.n	8001244 <HAL_GPIO_Init+0x14c>
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x152>
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	3b08      	subs	r3, #8
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	210f      	movs	r1, #15
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	401a      	ands	r2, r3
 800125c:	6a39      	ldr	r1, [r7, #32]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	431a      	orrs	r2, r3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80b1 	beq.w	80013da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001278:	4b4d      	ldr	r3, [pc, #308]	; (80013b0 <HAL_GPIO_Init+0x2b8>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <HAL_GPIO_Init+0x2b8>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <HAL_GPIO_Init+0x2b8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001290:	4a48      	ldr	r2, [pc, #288]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a40      	ldr	r2, [pc, #256]	; (80013b8 <HAL_GPIO_Init+0x2c0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d013      	beq.n	80012e4 <HAL_GPIO_Init+0x1ec>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a3f      	ldr	r2, [pc, #252]	; (80013bc <HAL_GPIO_Init+0x2c4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d00d      	beq.n	80012e0 <HAL_GPIO_Init+0x1e8>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a3e      	ldr	r2, [pc, #248]	; (80013c0 <HAL_GPIO_Init+0x2c8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d007      	beq.n	80012dc <HAL_GPIO_Init+0x1e4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a3d      	ldr	r2, [pc, #244]	; (80013c4 <HAL_GPIO_Init+0x2cc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d101      	bne.n	80012d8 <HAL_GPIO_Init+0x1e0>
 80012d4:	2303      	movs	r3, #3
 80012d6:	e006      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012d8:	2304      	movs	r3, #4
 80012da:	e004      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012dc:	2302      	movs	r3, #2
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012e4:	2300      	movs	r3, #0
 80012e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e8:	f002 0203 	and.w	r2, r2, #3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	4093      	lsls	r3, r2
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f6:	492f      	ldr	r1, [pc, #188]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	492c      	ldr	r1, [pc, #176]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	608b      	str	r3, [r1, #8]
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4928      	ldr	r1, [pc, #160]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001328:	4013      	ands	r3, r2
 800132a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	4922      	ldr	r1, [pc, #136]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	60cb      	str	r3, [r1, #12]
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	43db      	mvns	r3, r3
 800134e:	491e      	ldr	r1, [pc, #120]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001350:	4013      	ands	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4918      	ldr	r1, [pc, #96]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	4914      	ldr	r1, [pc, #80]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001378:	4013      	ands	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d021      	beq.n	80013cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	490e      	ldr	r1, [pc, #56]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e021      	b.n	80013da <HAL_GPIO_Init+0x2e2>
 8001396:	bf00      	nop
 8001398:	10320000 	.word	0x10320000
 800139c:	10310000 	.word	0x10310000
 80013a0:	10220000 	.word	0x10220000
 80013a4:	10210000 	.word	0x10210000
 80013a8:	10120000 	.word	0x10120000
 80013ac:	10110000 	.word	0x10110000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010000 	.word	0x40010000
 80013b8:	40010800 	.word	0x40010800
 80013bc:	40010c00 	.word	0x40010c00
 80013c0:	40011000 	.word	0x40011000
 80013c4:	40011400 	.word	0x40011400
 80013c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_GPIO_Init+0x304>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	4909      	ldr	r1, [pc, #36]	; (80013fc <HAL_GPIO_Init+0x304>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	3301      	adds	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f47f ae8e 	bne.w	800110c <HAL_GPIO_Init+0x14>
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	372c      	adds	r7, #44	; 0x2c
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e001      	b.n	8001422 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	460b      	mov	r3, r1
 8001438:	807b      	strh	r3, [r7, #2]
 800143a:	4613      	mov	r3, r2
 800143c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001444:	887a      	ldrh	r2, [r7, #2]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800144a:	e003      	b.n	8001454 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800144c:	887b      	ldrh	r3, [r7, #2]
 800144e:	041a      	lsls	r2, r3, #16
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	611a      	str	r2, [r3, #16]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800145e:	b480      	push	{r7}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001470:	887a      	ldrh	r2, [r7, #2]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4013      	ands	r3, r2
 8001476:	041a      	lsls	r2, r3, #16
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43d9      	mvns	r1, r3
 800147c:	887b      	ldrh	r3, [r7, #2]
 800147e:	400b      	ands	r3, r1
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	611a      	str	r2, [r3, #16]
}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe ffb4 	bl	800041c <HAL_GPIO_EXTI_Callback>
  }
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e272      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8087 	beq.w	80015ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e0:	4b92      	ldr	r3, [pc, #584]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 030c 	and.w	r3, r3, #12
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d00c      	beq.n	8001506 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ec:	4b8f      	ldr	r3, [pc, #572]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d112      	bne.n	800151e <HAL_RCC_OscConfig+0x5e>
 80014f8:	4b8c      	ldr	r3, [pc, #560]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001504:	d10b      	bne.n	800151e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001506:	4b89      	ldr	r3, [pc, #548]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d06c      	beq.n	80015ec <HAL_RCC_OscConfig+0x12c>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d168      	bne.n	80015ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e24c      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x76>
 8001528:	4b80      	ldr	r3, [pc, #512]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a7f      	ldr	r2, [pc, #508]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 800152e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e02e      	b.n	8001594 <HAL_RCC_OscConfig+0xd4>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x98>
 800153e:	4b7b      	ldr	r3, [pc, #492]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a7a      	ldr	r2, [pc, #488]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b78      	ldr	r3, [pc, #480]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a77      	ldr	r2, [pc, #476]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e01d      	b.n	8001594 <HAL_RCC_OscConfig+0xd4>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0xbc>
 8001562:	4b72      	ldr	r3, [pc, #456]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a71      	ldr	r2, [pc, #452]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b6f      	ldr	r3, [pc, #444]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a6e      	ldr	r2, [pc, #440]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e00b      	b.n	8001594 <HAL_RCC_OscConfig+0xd4>
 800157c:	4b6b      	ldr	r3, [pc, #428]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a6a      	ldr	r2, [pc, #424]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b68      	ldr	r3, [pc, #416]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a67      	ldr	r2, [pc, #412]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 800158e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001592:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fbe2 	bl	8000d64 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fbde 	bl	8000d64 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e200      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	4b5d      	ldr	r3, [pc, #372]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0xe4>
 80015c2:	e014      	b.n	80015ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fbce 	bl	8000d64 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fbca 	bl	8000d64 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e1ec      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	4b53      	ldr	r3, [pc, #332]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x10c>
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d063      	beq.n	80016c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015fa:	4b4c      	ldr	r3, [pc, #304]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001606:	4b49      	ldr	r3, [pc, #292]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b08      	cmp	r3, #8
 8001610:	d11c      	bne.n	800164c <HAL_RCC_OscConfig+0x18c>
 8001612:	4b46      	ldr	r3, [pc, #280]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d116      	bne.n	800164c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161e:	4b43      	ldr	r3, [pc, #268]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <HAL_RCC_OscConfig+0x176>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d001      	beq.n	8001636 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e1c0      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001636:	4b3d      	ldr	r3, [pc, #244]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4939      	ldr	r1, [pc, #228]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164a:	e03a      	b.n	80016c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d020      	beq.n	8001696 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001654:	4b36      	ldr	r3, [pc, #216]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fb83 	bl	8000d64 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001662:	f7ff fb7f 	bl	8000d64 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e1a1      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001680:	4b2a      	ldr	r3, [pc, #168]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4927      	ldr	r1, [pc, #156]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 8001690:	4313      	orrs	r3, r2
 8001692:	600b      	str	r3, [r1, #0]
 8001694:	e015      	b.n	80016c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001696:	4b26      	ldr	r3, [pc, #152]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fb62 	bl	8000d64 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a4:	f7ff fb5e 	bl	8000d64 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e180      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d03a      	beq.n	8001744 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d019      	beq.n	800170a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_RCC_OscConfig+0x274>)
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016dc:	f7ff fb42 	bl	8000d64 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e4:	f7ff fb3e 	bl	8000d64 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e160      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001702:	2001      	movs	r0, #1
 8001704:	f000 face 	bl	8001ca4 <RCC_Delay>
 8001708:	e01c      	b.n	8001744 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_RCC_OscConfig+0x274>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001710:	f7ff fb28 	bl	8000d64 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001716:	e00f      	b.n	8001738 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fb24 	bl	8000d64 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d908      	bls.n	8001738 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e146      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	42420000 	.word	0x42420000
 8001734:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	4b92      	ldr	r3, [pc, #584]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e9      	bne.n	8001718 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a6 	beq.w	800189e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001756:	4b8b      	ldr	r3, [pc, #556]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10d      	bne.n	800177e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b88      	ldr	r3, [pc, #544]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a87      	ldr	r2, [pc, #540]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	61d3      	str	r3, [r2, #28]
 800176e:	4b85      	ldr	r3, [pc, #532]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800177a:	2301      	movs	r3, #1
 800177c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177e:	4b82      	ldr	r3, [pc, #520]	; (8001988 <HAL_RCC_OscConfig+0x4c8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d118      	bne.n	80017bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178a:	4b7f      	ldr	r3, [pc, #508]	; (8001988 <HAL_RCC_OscConfig+0x4c8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a7e      	ldr	r2, [pc, #504]	; (8001988 <HAL_RCC_OscConfig+0x4c8>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001796:	f7ff fae5 	bl	8000d64 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179e:	f7ff fae1 	bl	8000d64 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b64      	cmp	r3, #100	; 0x64
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e103      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	4b75      	ldr	r3, [pc, #468]	; (8001988 <HAL_RCC_OscConfig+0x4c8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_OscConfig+0x312>
 80017c4:	4b6f      	ldr	r3, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4a6e      	ldr	r2, [pc, #440]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6213      	str	r3, [r2, #32]
 80017d0:	e02d      	b.n	800182e <HAL_RCC_OscConfig+0x36e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x334>
 80017da:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	4a69      	ldr	r2, [pc, #420]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	6213      	str	r3, [r2, #32]
 80017e6:	4b67      	ldr	r3, [pc, #412]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4a66      	ldr	r2, [pc, #408]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	f023 0304 	bic.w	r3, r3, #4
 80017f0:	6213      	str	r3, [r2, #32]
 80017f2:	e01c      	b.n	800182e <HAL_RCC_OscConfig+0x36e>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d10c      	bne.n	8001816 <HAL_RCC_OscConfig+0x356>
 80017fc:	4b61      	ldr	r3, [pc, #388]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4a60      	ldr	r2, [pc, #384]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	6213      	str	r3, [r2, #32]
 8001808:	4b5e      	ldr	r3, [pc, #376]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a5d      	ldr	r2, [pc, #372]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6213      	str	r3, [r2, #32]
 8001814:	e00b      	b.n	800182e <HAL_RCC_OscConfig+0x36e>
 8001816:	4b5b      	ldr	r3, [pc, #364]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a5a      	ldr	r2, [pc, #360]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	4b58      	ldr	r3, [pc, #352]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a57      	ldr	r2, [pc, #348]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	f023 0304 	bic.w	r3, r3, #4
 800182c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d015      	beq.n	8001862 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff fa95 	bl	8000d64 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff fa91 	bl	8000d64 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f241 3288 	movw	r2, #5000	; 0x1388
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e0b1      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001854:	4b4b      	ldr	r3, [pc, #300]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0ee      	beq.n	800183e <HAL_RCC_OscConfig+0x37e>
 8001860:	e014      	b.n	800188c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001862:	f7ff fa7f 	bl	8000d64 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	e00a      	b.n	8001880 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186a:	f7ff fa7b 	bl	8000d64 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	; 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e09b      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001880:	4b40      	ldr	r3, [pc, #256]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ee      	bne.n	800186a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d105      	bne.n	800189e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001892:	4b3c      	ldr	r3, [pc, #240]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a3b      	ldr	r2, [pc, #236]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8087 	beq.w	80019b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a8:	4b36      	ldr	r3, [pc, #216]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d061      	beq.n	8001978 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d146      	bne.n	800194a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018bc:	4b33      	ldr	r3, [pc, #204]	; (800198c <HAL_RCC_OscConfig+0x4cc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff fa4f 	bl	8000d64 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff fa4b 	bl	8000d64 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e06d      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018dc:	4b29      	ldr	r3, [pc, #164]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f0:	d108      	bne.n	8001904 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	4921      	ldr	r1, [pc, #132]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a19      	ldr	r1, [r3, #32]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	430b      	orrs	r3, r1
 8001916:	491b      	ldr	r1, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_RCC_OscConfig+0x4cc>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff fa1f 	bl	8000d64 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff fa1b 	bl	8000d64 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e03d      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x46a>
 8001948:	e035      	b.n	80019b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_RCC_OscConfig+0x4cc>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fa08 	bl	8000d64 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff fa04 	bl	8000d64 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e026      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x498>
 8001976:	e01e      	b.n	80019b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e019      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
 8001984:	40021000 	.word	0x40021000
 8001988:	40007000 	.word	0x40007000
 800198c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_OscConfig+0x500>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d106      	bne.n	80019b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0d0      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d910      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 0207 	bic.w	r2, r3, #7
 80019ee:	4965      	ldr	r1, [pc, #404]	; (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0b8      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a20:	4b59      	ldr	r3, [pc, #356]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4a58      	ldr	r2, [pc, #352]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a38:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a52      	ldr	r2, [pc, #328]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	494d      	ldr	r1, [pc, #308]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d040      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d115      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e07f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a82:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e073      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a92:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e06b      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa2:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f023 0203 	bic.w	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4936      	ldr	r1, [pc, #216]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab4:	f7ff f956 	bl	8000d64 <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abc:	f7ff f952 	bl	8000d64 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e053      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 020c 	and.w	r2, r3, #12
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d1eb      	bne.n	8001abc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d210      	bcs.n	8001b14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 0207 	bic.w	r2, r3, #7
 8001afa:	4922      	ldr	r1, [pc, #136]	; (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e032      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4916      	ldr	r1, [pc, #88]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	490e      	ldr	r1, [pc, #56]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b52:	f000 f821 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001b56:	4602      	mov	r2, r0
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	490a      	ldr	r1, [pc, #40]	; (8001b8c <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	5ccb      	ldrb	r3, [r1, r3]
 8001b66:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1cc>)
 8001b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_ClockConfig+0x1d0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f8b4 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40022000 	.word	0x40022000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	0800392c 	.word	0x0800392c
 8001b90:	20000004 	.word	0x20000004
 8001b94:	20000008 	.word	0x20000008

08001b98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x94>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d002      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x30>
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d003      	beq.n	8001bce <HAL_RCC_GetSysClockFreq+0x36>
 8001bc6:	e027      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bca:	613b      	str	r3, [r7, #16]
      break;
 8001bcc:	e027      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	0c9b      	lsrs	r3, r3, #18
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d010      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x94>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	0c5b      	lsrs	r3, r3, #17
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfa:	fb03 f202 	mul.w	r2, r3, r2
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e004      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	613b      	str	r3, [r7, #16]
      break;
 8001c16:	e002      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c1a:	613b      	str	r3, [r7, #16]
      break;
 8001c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1e:	693b      	ldr	r3, [r7, #16]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	007a1200 	.word	0x007a1200
 8001c34:	08003944 	.word	0x08003944
 8001c38:	08003954 	.word	0x08003954
 8001c3c:	003d0900 	.word	0x003d0900

08001c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c44:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c58:	f7ff fff2 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	0800393c 	.word	0x0800393c

08001c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c80:	f7ff ffde 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0adb      	lsrs	r3, r3, #11
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	0800393c 	.word	0x0800393c

08001ca4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <RCC_Delay+0x34>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <RCC_Delay+0x38>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0a5b      	lsrs	r3, r3, #9
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cc0:	bf00      	nop
  }
  while (Delay --);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1e5a      	subs	r2, r3, #1
 8001cc6:	60fa      	str	r2, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f9      	bne.n	8001cc0 <RCC_Delay+0x1c>
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	10624dd3 	.word	0x10624dd3

08001ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e041      	b.n	8001d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fec0 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f000 fc30 	bl	8002584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d001      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e03a      	b.n	8001e0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <HAL_TIM_Base_Start_IT+0x98>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00e      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0x58>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc2:	d009      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0x58>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_TIM_Base_Start_IT+0x9c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0x58>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <HAL_TIM_Base_Start_IT+0xa0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d111      	bne.n	8001dfc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d010      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfa:	e007      	b.n	8001e0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	40012c00 	.word	0x40012c00
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	40000800 	.word	0x40000800

08001e24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e041      	b.n	8001eba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f839 	bl	8001ec2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f000 fb8e 	bl	8002584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_TIM_PWM_Start+0x24>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	e022      	b.n	8001f3e <HAL_TIM_PWM_Start+0x6a>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d109      	bne.n	8001f12 <HAL_TIM_PWM_Start+0x3e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	bf14      	ite	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	2300      	moveq	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	e015      	b.n	8001f3e <HAL_TIM_PWM_Start+0x6a>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d109      	bne.n	8001f2c <HAL_TIM_PWM_Start+0x58>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e008      	b.n	8001f3e <HAL_TIM_PWM_Start+0x6a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	bf14      	ite	ne
 8001f38:	2301      	movne	r3, #1
 8001f3a:	2300      	moveq	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e05e      	b.n	8002004 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d104      	bne.n	8001f56 <HAL_TIM_PWM_Start+0x82>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f54:	e013      	b.n	8001f7e <HAL_TIM_PWM_Start+0xaa>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d104      	bne.n	8001f66 <HAL_TIM_PWM_Start+0x92>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f64:	e00b      	b.n	8001f7e <HAL_TIM_PWM_Start+0xaa>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d104      	bne.n	8001f76 <HAL_TIM_PWM_Start+0xa2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f74:	e003      	b.n	8001f7e <HAL_TIM_PWM_Start+0xaa>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2201      	movs	r2, #1
 8001f84:	6839      	ldr	r1, [r7, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fd7c 	bl	8002a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1e      	ldr	r2, [pc, #120]	; (800200c <HAL_TIM_PWM_Start+0x138>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d107      	bne.n	8001fa6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a18      	ldr	r2, [pc, #96]	; (800200c <HAL_TIM_PWM_Start+0x138>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00e      	beq.n	8001fce <HAL_TIM_PWM_Start+0xfa>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb8:	d009      	beq.n	8001fce <HAL_TIM_PWM_Start+0xfa>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <HAL_TIM_PWM_Start+0x13c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d004      	beq.n	8001fce <HAL_TIM_PWM_Start+0xfa>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a12      	ldr	r2, [pc, #72]	; (8002014 <HAL_TIM_PWM_Start+0x140>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d111      	bne.n	8001ff2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b06      	cmp	r3, #6
 8001fde:	d010      	beq.n	8002002 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff0:	e007      	b.n	8002002 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0201 	orr.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40000400 	.word	0x40000400
 8002014:	40000800 	.word	0x40000800

08002018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b02      	cmp	r3, #2
 800202c:	d122      	bne.n	8002074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b02      	cmp	r3, #2
 800203a:	d11b      	bne.n	8002074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0202 	mvn.w	r2, #2
 8002044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fa76 	bl	800254c <HAL_TIM_IC_CaptureCallback>
 8002060:	e005      	b.n	800206e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fa69 	bl	800253a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fa78 	bl	800255e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b04      	cmp	r3, #4
 8002080:	d122      	bne.n	80020c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b04      	cmp	r3, #4
 800208e:	d11b      	bne.n	80020c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0204 	mvn.w	r2, #4
 8002098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2202      	movs	r2, #2
 800209e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fa4c 	bl	800254c <HAL_TIM_IC_CaptureCallback>
 80020b4:	e005      	b.n	80020c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fa3f 	bl	800253a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fa4e 	bl	800255e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d122      	bne.n	800211c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d11b      	bne.n	800211c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0208 	mvn.w	r2, #8
 80020ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2204      	movs	r2, #4
 80020f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fa22 	bl	800254c <HAL_TIM_IC_CaptureCallback>
 8002108:	e005      	b.n	8002116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fa15 	bl	800253a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fa24 	bl	800255e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b10      	cmp	r3, #16
 8002128:	d122      	bne.n	8002170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b10      	cmp	r3, #16
 8002136:	d11b      	bne.n	8002170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0210 	mvn.w	r2, #16
 8002140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2208      	movs	r2, #8
 8002146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f9f8 	bl	800254c <HAL_TIM_IC_CaptureCallback>
 800215c:	e005      	b.n	800216a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f9eb 	bl	800253a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f9fa 	bl	800255e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10e      	bne.n	800219c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0201 	mvn.w	r2, #1
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe f994 	bl	80004c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a6:	2b80      	cmp	r3, #128	; 0x80
 80021a8:	d10e      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	2b80      	cmp	r3, #128	; 0x80
 80021b6:	d107      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fce9 	bl	8002b9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e0:	2b40      	cmp	r3, #64	; 0x40
 80021e2:	d107      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f9be 	bl	8002570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d10e      	bne.n	8002220 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b20      	cmp	r3, #32
 800220e:	d107      	bne.n	8002220 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0220 	mvn.w	r2, #32
 8002218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fcb4 	bl	8002b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002242:	2302      	movs	r3, #2
 8002244:	e0ae      	b.n	80023a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	f200 809f 	bhi.w	8002394 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002256:	a201      	add	r2, pc, #4	; (adr r2, 800225c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	08002291 	.word	0x08002291
 8002260:	08002395 	.word	0x08002395
 8002264:	08002395 	.word	0x08002395
 8002268:	08002395 	.word	0x08002395
 800226c:	080022d1 	.word	0x080022d1
 8002270:	08002395 	.word	0x08002395
 8002274:	08002395 	.word	0x08002395
 8002278:	08002395 	.word	0x08002395
 800227c:	08002313 	.word	0x08002313
 8002280:	08002395 	.word	0x08002395
 8002284:	08002395 	.word	0x08002395
 8002288:	08002395 	.word	0x08002395
 800228c:	08002353 	.word	0x08002353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f9d6 	bl	8002648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0208 	orr.w	r2, r2, #8
 80022aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0204 	bic.w	r2, r2, #4
 80022ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6999      	ldr	r1, [r3, #24]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	619a      	str	r2, [r3, #24]
      break;
 80022ce:	e064      	b.n	800239a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fa1c 	bl	8002714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6999      	ldr	r1, [r3, #24]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	021a      	lsls	r2, r3, #8
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	619a      	str	r2, [r3, #24]
      break;
 8002310:	e043      	b.n	800239a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fa65 	bl	80027e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0208 	orr.w	r2, r2, #8
 800232c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0204 	bic.w	r2, r2, #4
 800233c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69d9      	ldr	r1, [r3, #28]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	61da      	str	r2, [r3, #28]
      break;
 8002350:	e023      	b.n	800239a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 faaf 	bl	80028bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69da      	ldr	r2, [r3, #28]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800236c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69d9      	ldr	r1, [r3, #28]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	021a      	lsls	r2, r3, #8
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	61da      	str	r2, [r3, #28]
      break;
 8002392:	e002      	b.n	800239a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	75fb      	strb	r3, [r7, #23]
      break;
 8002398:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_TIM_ConfigClockSource+0x1c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e0b4      	b.n	8002532 <HAL_TIM_ConfigClockSource+0x186>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002400:	d03e      	beq.n	8002480 <HAL_TIM_ConfigClockSource+0xd4>
 8002402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002406:	f200 8087 	bhi.w	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 800240a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240e:	f000 8086 	beq.w	800251e <HAL_TIM_ConfigClockSource+0x172>
 8002412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002416:	d87f      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002418:	2b70      	cmp	r3, #112	; 0x70
 800241a:	d01a      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0xa6>
 800241c:	2b70      	cmp	r3, #112	; 0x70
 800241e:	d87b      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002420:	2b60      	cmp	r3, #96	; 0x60
 8002422:	d050      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002424:	2b60      	cmp	r3, #96	; 0x60
 8002426:	d877      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002428:	2b50      	cmp	r3, #80	; 0x50
 800242a:	d03c      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0xfa>
 800242c:	2b50      	cmp	r3, #80	; 0x50
 800242e:	d873      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d058      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d86f      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002438:	2b30      	cmp	r3, #48	; 0x30
 800243a:	d064      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x15a>
 800243c:	2b30      	cmp	r3, #48	; 0x30
 800243e:	d86b      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002440:	2b20      	cmp	r3, #32
 8002442:	d060      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x15a>
 8002444:	2b20      	cmp	r3, #32
 8002446:	d867      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b00      	cmp	r3, #0
 800244a:	d05c      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x15a>
 800244c:	2b10      	cmp	r3, #16
 800244e:	d05a      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x15a>
 8002450:	e062      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f000 faf0 	bl	8002a46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	609a      	str	r2, [r3, #8]
      break;
 800247e:	e04f      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f000 fad9 	bl	8002a46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a2:	609a      	str	r2, [r3, #8]
      break;
 80024a4:	e03c      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f000 fa50 	bl	8002958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2150      	movs	r1, #80	; 0x50
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 faa7 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 80024c4:	e02c      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f000 fa6e 	bl	80029b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2160      	movs	r1, #96	; 0x60
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fa97 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 80024e4:	e01c      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	461a      	mov	r2, r3
 80024f4:	f000 fa30 	bl	8002958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2140      	movs	r1, #64	; 0x40
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fa87 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 8002504:	e00c      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4619      	mov	r1, r3
 8002510:	4610      	mov	r0, r2
 8002512:	f000 fa7e 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 8002516:	e003      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
      break;
 800251c:	e000      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800251e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
	...

08002584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a29      	ldr	r2, [pc, #164]	; (800263c <TIM_Base_SetConfig+0xb8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00b      	beq.n	80025b4 <TIM_Base_SetConfig+0x30>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a2:	d007      	beq.n	80025b4 <TIM_Base_SetConfig+0x30>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a26      	ldr	r2, [pc, #152]	; (8002640 <TIM_Base_SetConfig+0xbc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d003      	beq.n	80025b4 <TIM_Base_SetConfig+0x30>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a25      	ldr	r2, [pc, #148]	; (8002644 <TIM_Base_SetConfig+0xc0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d108      	bne.n	80025c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a1c      	ldr	r2, [pc, #112]	; (800263c <TIM_Base_SetConfig+0xb8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00b      	beq.n	80025e6 <TIM_Base_SetConfig+0x62>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d4:	d007      	beq.n	80025e6 <TIM_Base_SetConfig+0x62>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a19      	ldr	r2, [pc, #100]	; (8002640 <TIM_Base_SetConfig+0xbc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d003      	beq.n	80025e6 <TIM_Base_SetConfig+0x62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a18      	ldr	r2, [pc, #96]	; (8002644 <TIM_Base_SetConfig+0xc0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d108      	bne.n	80025f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a07      	ldr	r2, [pc, #28]	; (800263c <TIM_Base_SetConfig+0xb8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d103      	bne.n	800262c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	615a      	str	r2, [r3, #20]
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40000400 	.word	0x40000400
 8002644:	40000800 	.word	0x40000800

08002648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f023 0201 	bic.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f023 0302 	bic.w	r3, r3, #2
 8002690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <TIM_OC1_SetConfig+0xc8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d10c      	bne.n	80026be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0308 	bic.w	r3, r3, #8
 80026aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a13      	ldr	r2, [pc, #76]	; (8002710 <TIM_OC1_SetConfig+0xc8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d111      	bne.n	80026ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	621a      	str	r2, [r3, #32]
}
 8002704:	bf00      	nop
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40012c00 	.word	0x40012c00

08002714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f023 0210 	bic.w	r2, r3, #16
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f023 0320 	bic.w	r3, r3, #32
 800275e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <TIM_OC2_SetConfig+0xd0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d10d      	bne.n	8002790 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800277a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800278e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <TIM_OC2_SetConfig+0xd0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d113      	bne.n	80027c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800279e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	621a      	str	r2, [r3, #32]
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	40012c00 	.word	0x40012c00

080027e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0303 	bic.w	r3, r3, #3
 800281e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <TIM_OC3_SetConfig+0xd0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10d      	bne.n	8002862 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800284c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <TIM_OC3_SetConfig+0xd0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d113      	bne.n	8002892 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	621a      	str	r2, [r3, #32]
}
 80028ac:	bf00      	nop
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40012c00 	.word	0x40012c00

080028bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	031b      	lsls	r3, r3, #12
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a0f      	ldr	r2, [pc, #60]	; (8002954 <TIM_OC4_SetConfig+0x98>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d109      	bne.n	8002930 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002922:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	019b      	lsls	r3, r3, #6
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	621a      	str	r2, [r3, #32]
}
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr
 8002954:	40012c00 	.word	0x40012c00

08002958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f023 0201 	bic.w	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f023 030a 	bic.w	r3, r3, #10
 8002994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	621a      	str	r2, [r3, #32]
}
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f023 0210 	bic.w	r2, r3, #16
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	031b      	lsls	r3, r3, #12
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	621a      	str	r2, [r3, #32]
}
 8002a08:	bf00      	nop
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f043 0307 	orr.w	r3, r3, #7
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	609a      	str	r2, [r3, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b087      	sub	sp, #28
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	021a      	lsls	r2, r3, #8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	609a      	str	r2, [r3, #8]
}
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2201      	movs	r2, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1a      	ldr	r2, [r3, #32]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	431a      	orrs	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	621a      	str	r2, [r3, #32]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e046      	b.n	8002b72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a16      	ldr	r2, [pc, #88]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00e      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b30:	d009      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d004      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10c      	bne.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800

08002b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e042      	b.n	8002c44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fd fff4 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fdc5 	bl	8003780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d16d      	bne.n	8002d48 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_UART_Transmit+0x2c>
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e066      	b.n	8002d4a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2221      	movs	r2, #33	; 0x21
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c8a:	f7fe f86b 	bl	8000d64 <HAL_GetTick>
 8002c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	88fa      	ldrh	r2, [r7, #6]
 8002c94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	88fa      	ldrh	r2, [r7, #6]
 8002c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca4:	d108      	bne.n	8002cb8 <HAL_UART_Transmit+0x6c>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d104      	bne.n	8002cb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	e003      	b.n	8002cc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cc0:	e02a      	b.n	8002d18 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2180      	movs	r1, #128	; 0x80
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fb14 	bl	80032fa <UART_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e036      	b.n	8002d4a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10b      	bne.n	8002cfa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	e007      	b.n	8002d0a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	3301      	adds	r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1cf      	bne.n	8002cc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2140      	movs	r1, #64	; 0x40
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fae4 	bl	80032fa <UART_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e006      	b.n	8002d4a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d112      	bne.n	8002d92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_UART_Receive_IT+0x26>
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e00b      	b.n	8002d94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	461a      	mov	r2, r3
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fb24 	bl	80033d6 <UART_Start_Receive_IT>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	e000      	b.n	8002d94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b0ba      	sub	sp, #232	; 0xe8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_UART_IRQHandler+0x66>
 8002dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fc01 	bl	8003602 <UART_Receive_IT>
      return;
 8002e00:	e25b      	b.n	80032ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80de 	beq.w	8002fc8 <HAL_UART_IRQHandler+0x22c>
 8002e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d106      	bne.n	8002e26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80d1 	beq.w	8002fc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_UART_IRQHandler+0xae>
 8002e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f043 0201 	orr.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_UART_IRQHandler+0xd2>
 8002e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f043 0202 	orr.w	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_UART_IRQHandler+0xf6>
 8002e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f043 0204 	orr.w	r2, r3, #4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d011      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x126>
 8002e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f043 0208 	orr.w	r2, r3, #8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 81f2 	beq.w	80032b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_UART_IRQHandler+0x14e>
 8002ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fb8c 	bl	8003602 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d103      	bne.n	8002f16 <HAL_UART_IRQHandler+0x17a>
 8002f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d04f      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fa96 	bl	8003448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d041      	beq.n	8002fae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3314      	adds	r3, #20
 8002f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3314      	adds	r3, #20
 8002f52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1d9      	bne.n	8002f2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d013      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	4a7e      	ldr	r2, [pc, #504]	; (800317c <HAL_UART_IRQHandler+0x3e0>)
 8002f84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe f83c 	bl	8001008 <HAL_DMA_Abort_IT>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa4:	e00e      	b.n	8002fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f993 	bl	80032d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fac:	e00a      	b.n	8002fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f98f 	bl	80032d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb4:	e006      	b.n	8002fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f98b 	bl	80032d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002fc2:	e175      	b.n	80032b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc4:	bf00      	nop
    return;
 8002fc6:	e173      	b.n	80032b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	f040 814f 	bne.w	8003270 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8148 	beq.w	8003270 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8141 	beq.w	8003270 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80b6 	beq.w	8003180 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003020:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8145 	beq.w	80032b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800302e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003032:	429a      	cmp	r2, r3
 8003034:	f080 813e 	bcs.w	80032b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800303e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b20      	cmp	r3, #32
 8003048:	f000 8088 	beq.w	800315c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	330c      	adds	r3, #12
 8003052:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800305a:	e853 3f00 	ldrex	r3, [r3]
 800305e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003062:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003066:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800306a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	330c      	adds	r3, #12
 8003074:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003078:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800307c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003080:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003084:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003088:	e841 2300 	strex	r3, r2, [r1]
 800308c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1d9      	bne.n	800304c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3314      	adds	r3, #20
 800309e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a2:	e853 3f00 	ldrex	r3, [r3]
 80030a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3314      	adds	r3, #20
 80030b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e1      	bne.n	8003098 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3314      	adds	r3, #20
 80030da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030de:	e853 3f00 	ldrex	r3, [r3]
 80030e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3314      	adds	r3, #20
 80030f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e3      	bne.n	80030d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	330c      	adds	r3, #12
 8003120:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800312a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312c:	f023 0310 	bic.w	r3, r3, #16
 8003130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800313e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003140:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800314c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e3      	bne.n	800311a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd ff1b 	bl	8000f92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800316a:	b29b      	uxth	r3, r3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	b29b      	uxth	r3, r3
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8b6 	bl	80032e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003178:	e09c      	b.n	80032b4 <HAL_UART_IRQHandler+0x518>
 800317a:	bf00      	nop
 800317c:	0800350d 	.word	0x0800350d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003188:	b29b      	uxth	r3, r3
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 808e 	beq.w	80032b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800319c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8089 	beq.w	80032b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	330c      	adds	r3, #12
 80031ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	330c      	adds	r3, #12
 80031c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80031ca:	647a      	str	r2, [r7, #68]	; 0x44
 80031cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e3      	bne.n	80031a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3314      	adds	r3, #20
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	e853 3f00 	ldrex	r3, [r3]
 80031ec:	623b      	str	r3, [r7, #32]
   return(result);
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3314      	adds	r3, #20
 80031fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003202:	633a      	str	r2, [r7, #48]	; 0x30
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e3      	bne.n	80031de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	e853 3f00 	ldrex	r3, [r3]
 8003232:	60fb      	str	r3, [r7, #12]
   return(result);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0310 	bic.w	r3, r3, #16
 800323a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	330c      	adds	r3, #12
 8003244:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003248:	61fa      	str	r2, [r7, #28]
 800324a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	69b9      	ldr	r1, [r7, #24]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	e841 2300 	strex	r3, r2, [r1]
 8003254:	617b      	str	r3, [r7, #20]
   return(result);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e3      	bne.n	8003224 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003262:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003266:	4619      	mov	r1, r3
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f83b 	bl	80032e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800326e:	e023      	b.n	80032b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b00      	cmp	r3, #0
 800327a:	d009      	beq.n	8003290 <HAL_UART_IRQHandler+0x4f4>
 800327c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f953 	bl	8003534 <UART_Transmit_IT>
    return;
 800328e:	e014      	b.n	80032ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <HAL_UART_IRQHandler+0x51e>
 800329c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f992 	bl	80035d2 <UART_EndTransmit_IT>
    return;
 80032ae:	e004      	b.n	80032ba <HAL_UART_IRQHandler+0x51e>
    return;
 80032b0:	bf00      	nop
 80032b2:	e002      	b.n	80032ba <HAL_UART_IRQHandler+0x51e>
      return;
 80032b4:	bf00      	nop
 80032b6:	e000      	b.n	80032ba <HAL_UART_IRQHandler+0x51e>
      return;
 80032b8:	bf00      	nop
  }
}
 80032ba:	37e8      	adds	r7, #232	; 0xe8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b090      	sub	sp, #64	; 0x40
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330a:	e050      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d04c      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <UART_WaitOnFlagUntilTimeout+0x30>
 800331a:	f7fd fd23 	bl	8000d64 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003326:	429a      	cmp	r2, r3
 8003328:	d241      	bcs.n	80033ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	330c      	adds	r3, #12
 8003348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800334a:	637a      	str	r2, [r7, #52]	; 0x34
 800334c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e5      	bne.n	800332a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3314      	adds	r3, #20
 8003364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	613b      	str	r3, [r7, #16]
   return(result);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	63bb      	str	r3, [r7, #56]	; 0x38
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3314      	adds	r3, #20
 800337c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800337e:	623a      	str	r2, [r7, #32]
 8003380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	69f9      	ldr	r1, [r7, #28]
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	61bb      	str	r3, [r7, #24]
   return(result);
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e5      	bne.n	800335e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e00f      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d09f      	beq.n	800330c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3740      	adds	r7, #64	; 0x40
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b085      	sub	sp, #20
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	4613      	mov	r3, r2
 80033e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	88fa      	ldrh	r2, [r7, #6]
 80033ee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2222      	movs	r2, #34	; 0x22
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800341a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0220 	orr.w	r2, r2, #32
 800343a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b095      	sub	sp, #84	; 0x54
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003470:	643a      	str	r2, [r7, #64]	; 0x40
 8003472:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003476:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800347e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e5      	bne.n	8003450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3314      	adds	r3, #20
 800348a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	61fb      	str	r3, [r7, #28]
   return(result);
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	64bb      	str	r3, [r7, #72]	; 0x48
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3314      	adds	r3, #20
 80034a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e5      	bne.n	8003484 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d119      	bne.n	80034f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f023 0310 	bic.w	r3, r3, #16
 80034d6:	647b      	str	r3, [r7, #68]	; 0x44
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034e0:	61ba      	str	r2, [r7, #24]
 80034e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6979      	ldr	r1, [r7, #20]
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	613b      	str	r3, [r7, #16]
   return(result);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e5      	bne.n	80034c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003502:	bf00      	nop
 8003504:	3754      	adds	r7, #84	; 0x54
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f7ff fed3 	bl	80032d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b21      	cmp	r3, #33	; 0x21
 8003546:	d13e      	bne.n	80035c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003550:	d114      	bne.n	800357c <UART_Transmit_IT+0x48>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d110      	bne.n	800357c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800356e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	1c9a      	adds	r2, r3, #2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	621a      	str	r2, [r3, #32]
 800357a:	e008      	b.n	800358e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	1c59      	adds	r1, r3, #1
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6211      	str	r1, [r2, #32]
 8003586:	781a      	ldrb	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29b      	uxth	r3, r3
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	4619      	mov	r1, r3
 800359c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10f      	bne.n	80035c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e000      	b.n	80035c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
  }
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr

080035d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff fe64 	bl	80032c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b08c      	sub	sp, #48	; 0x30
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b22      	cmp	r3, #34	; 0x22
 8003614:	f040 80ae 	bne.w	8003774 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003620:	d117      	bne.n	8003652 <UART_Receive_IT+0x50>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d113      	bne.n	8003652 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800362a:	2300      	movs	r3, #0
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	b29b      	uxth	r3, r3
 800363c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003640:	b29a      	uxth	r2, r3
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	1c9a      	adds	r2, r3, #2
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
 8003650:	e026      	b.n	80036a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003658:	2300      	movs	r3, #0
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003664:	d007      	beq.n	8003676 <UART_Receive_IT+0x74>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <UART_Receive_IT+0x82>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e008      	b.n	8003696 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003690:	b2da      	uxtb	r2, r3
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4619      	mov	r1, r3
 80036ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d15d      	bne.n	8003770 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0220 	bic.w	r2, r2, #32
 80036c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d135      	bne.n	8003766 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	613b      	str	r3, [r7, #16]
   return(result);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f023 0310 	bic.w	r3, r3, #16
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	623a      	str	r2, [r7, #32]
 8003722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	69f9      	ldr	r1, [r7, #28]
 8003726:	6a3a      	ldr	r2, [r7, #32]
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	61bb      	str	r3, [r7, #24]
   return(result);
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b10      	cmp	r3, #16
 8003740:	d10a      	bne.n	8003758 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff fdc0 	bl	80032e4 <HAL_UARTEx_RxEventCallback>
 8003764:	e002      	b.n	800376c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fc fe98 	bl	800049c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e002      	b.n	8003776 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3730      	adds	r7, #48	; 0x30
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037ba:	f023 030c 	bic.w	r3, r3, #12
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	430b      	orrs	r3, r1
 80037c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2c      	ldr	r2, [pc, #176]	; (8003894 <UART_SetConfig+0x114>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d103      	bne.n	80037f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037e8:	f7fe fa48 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	e002      	b.n	80037f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037f0:	f7fe fa30 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 80037f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	009a      	lsls	r2, r3, #2
 8003800:	441a      	add	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	4a22      	ldr	r2, [pc, #136]	; (8003898 <UART_SetConfig+0x118>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	0119      	lsls	r1, r3, #4
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009a      	lsls	r2, r3, #2
 8003820:	441a      	add	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	fbb2 f2f3 	udiv	r2, r2, r3
 800382c:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <UART_SetConfig+0x118>)
 800382e:	fba3 0302 	umull	r0, r3, r3, r2
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	2064      	movs	r0, #100	; 0x64
 8003836:	fb00 f303 	mul.w	r3, r0, r3
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	3332      	adds	r3, #50	; 0x32
 8003840:	4a15      	ldr	r2, [pc, #84]	; (8003898 <UART_SetConfig+0x118>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800384c:	4419      	add	r1, r3
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009a      	lsls	r2, r3, #2
 8003858:	441a      	add	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	fbb2 f2f3 	udiv	r2, r2, r3
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <UART_SetConfig+0x118>)
 8003866:	fba3 0302 	umull	r0, r3, r3, r2
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2064      	movs	r0, #100	; 0x64
 800386e:	fb00 f303 	mul.w	r3, r0, r3
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	3332      	adds	r3, #50	; 0x32
 8003878:	4a07      	ldr	r2, [pc, #28]	; (8003898 <UART_SetConfig+0x118>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f003 020f 	and.w	r2, r3, #15
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	440a      	add	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40013800 	.word	0x40013800
 8003898:	51eb851f 	.word	0x51eb851f

0800389c <__libc_init_array>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	2600      	movs	r6, #0
 80038a0:	4d0c      	ldr	r5, [pc, #48]	; (80038d4 <__libc_init_array+0x38>)
 80038a2:	4c0d      	ldr	r4, [pc, #52]	; (80038d8 <__libc_init_array+0x3c>)
 80038a4:	1b64      	subs	r4, r4, r5
 80038a6:	10a4      	asrs	r4, r4, #2
 80038a8:	42a6      	cmp	r6, r4
 80038aa:	d109      	bne.n	80038c0 <__libc_init_array+0x24>
 80038ac:	f000 f822 	bl	80038f4 <_init>
 80038b0:	2600      	movs	r6, #0
 80038b2:	4d0a      	ldr	r5, [pc, #40]	; (80038dc <__libc_init_array+0x40>)
 80038b4:	4c0a      	ldr	r4, [pc, #40]	; (80038e0 <__libc_init_array+0x44>)
 80038b6:	1b64      	subs	r4, r4, r5
 80038b8:	10a4      	asrs	r4, r4, #2
 80038ba:	42a6      	cmp	r6, r4
 80038bc:	d105      	bne.n	80038ca <__libc_init_array+0x2e>
 80038be:	bd70      	pop	{r4, r5, r6, pc}
 80038c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c4:	4798      	blx	r3
 80038c6:	3601      	adds	r6, #1
 80038c8:	e7ee      	b.n	80038a8 <__libc_init_array+0xc>
 80038ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ce:	4798      	blx	r3
 80038d0:	3601      	adds	r6, #1
 80038d2:	e7f2      	b.n	80038ba <__libc_init_array+0x1e>
 80038d4:	08003958 	.word	0x08003958
 80038d8:	08003958 	.word	0x08003958
 80038dc:	08003958 	.word	0x08003958
 80038e0:	0800395c 	.word	0x0800395c

080038e4 <memset>:
 80038e4:	4603      	mov	r3, r0
 80038e6:	4402      	add	r2, r0
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d100      	bne.n	80038ee <memset+0xa>
 80038ec:	4770      	bx	lr
 80038ee:	f803 1b01 	strb.w	r1, [r3], #1
 80038f2:	e7f9      	b.n	80038e8 <memset+0x4>

080038f4 <_init>:
 80038f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f6:	bf00      	nop
 80038f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fa:	bc08      	pop	{r3}
 80038fc:	469e      	mov	lr, r3
 80038fe:	4770      	bx	lr

08003900 <_fini>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	bf00      	nop
 8003904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003906:	bc08      	pop	{r3}
 8003908:	469e      	mov	lr, r3
 800390a:	4770      	bx	lr
